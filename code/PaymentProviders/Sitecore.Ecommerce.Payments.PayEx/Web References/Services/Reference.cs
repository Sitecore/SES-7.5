//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Sitecore.Ecommerce.Payments.PayEx.Services {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PxOrderSoap", Namespace="http://external.payex.com/PxOrder/")]
    public partial class PxOrder : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Initialize7OperationCompleted;
        
        private System.Threading.SendOrPostCallback InitializeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Initialize3OperationCompleted;
        
        private System.Threading.SendOrPostCallback Initialize4OperationCompleted;
        
        private System.Threading.SendOrPostCallback Initialize5OperationCompleted;
        
        private System.Threading.SendOrPostCallback Initialize6OperationCompleted;
        
        private System.Threading.SendOrPostCallback Initialize1OperationCompleted;
        
        private System.Threading.SendOrPostCallback InitializeBasicOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback Check2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback SalePXOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizePXOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchasePXOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseActivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseOTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleCPAOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReserveIVROperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleIVROperationCompleted;
        
        private System.Threading.SendOrPostCallback Cancel2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback Credit2OperationCompleted;
        
        private System.Threading.SendOrPostCallback Credit3OperationCompleted;
        
        private System.Threading.SendOrPostCallback Credit4OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditOrderLine2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditOrderLine3OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditOrderLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback CaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback Capture2OperationCompleted;
        
        private System.Threading.SendOrPostCallback Capture3OperationCompleted;
        
        private System.Threading.SendOrPostCallback Capture4OperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleEVCOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeEVCOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSingleOrderLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMultipleOrderLinesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareSaleDDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareSaleDD2OperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareAuthorizeDDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleInvoice2OperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleInvoiceLedgerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLoanOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateLoanOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleLoanOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeLoanOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddOrderAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddOrderAddress2OperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeGCOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleGCOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionDetails2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransactionCheck2OperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeInvoiceLedgerOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseInvoicePrivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseInvoiceCorporateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PxOrder() {
            this.Url = global::Sitecore.Ecommerce.Payments.PayEx.Properties.Settings.Default.Sitecore_Ecommerce_Payments_PayEx_PayExTest_PxOrder;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event Initialize7CompletedEventHandler Initialize7Completed;
        
        /// <remarks/>
        public event InitializeCompletedEventHandler InitializeCompleted;
        
        /// <remarks/>
        public event Initialize3CompletedEventHandler Initialize3Completed;
        
        /// <remarks/>
        public event Initialize4CompletedEventHandler Initialize4Completed;
        
        /// <remarks/>
        public event Initialize5CompletedEventHandler Initialize5Completed;
        
        /// <remarks/>
        public event Initialize6CompletedEventHandler Initialize6Completed;
        
        /// <remarks/>
        public event Initialize1CompletedEventHandler Initialize1Completed;
        
        /// <remarks/>
        public event InitializeBasicCompletedEventHandler InitializeBasicCompleted;
        
        /// <remarks/>
        public event CompleteCompletedEventHandler CompleteCompleted;
        
        /// <remarks/>
        public event Check2CompletedEventHandler Check2Completed;
        
        /// <remarks/>
        public event CheckCompletedEventHandler CheckCompleted;
        
        /// <remarks/>
        public event SalePXCompletedEventHandler SalePXCompleted;
        
        /// <remarks/>
        public event AuthorizePXCompletedEventHandler AuthorizePXCompleted;
        
        /// <remarks/>
        public event PurchasePXCompletedEventHandler PurchasePXCompleted;
        
        /// <remarks/>
        public event PurchaseActivateCompletedEventHandler PurchaseActivateCompleted;
        
        /// <remarks/>
        public event PurchaseCACompletedEventHandler PurchaseCACompleted;
        
        /// <remarks/>
        public event PurchaseOTTCompletedEventHandler PurchaseOTTCompleted;
        
        /// <remarks/>
        public event SaleCPACompletedEventHandler SaleCPACompleted;
        
        /// <remarks/>
        public event SaleCACompletedEventHandler SaleCACompleted;
        
        /// <remarks/>
        public event AuthorizeCACompletedEventHandler AuthorizeCACompleted;
        
        /// <remarks/>
        public event ReserveIVRCompletedEventHandler ReserveIVRCompleted;
        
        /// <remarks/>
        public event SaleIVRCompletedEventHandler SaleIVRCompleted;
        
        /// <remarks/>
        public event Cancel2CompletedEventHandler Cancel2Completed;
        
        /// <remarks/>
        public event CancelCompletedEventHandler CancelCompleted;
        
        /// <remarks/>
        public event Credit2CompletedEventHandler Credit2Completed;
        
        /// <remarks/>
        public event Credit3CompletedEventHandler Credit3Completed;
        
        /// <remarks/>
        public event Credit4CompletedEventHandler Credit4Completed;
        
        /// <remarks/>
        public event CreditCompletedEventHandler CreditCompleted;
        
        /// <remarks/>
        public event CreditOrderLine2CompletedEventHandler CreditOrderLine2Completed;
        
        /// <remarks/>
        public event CreditOrderLine3CompletedEventHandler CreditOrderLine3Completed;
        
        /// <remarks/>
        public event CreditOrderLineCompletedEventHandler CreditOrderLineCompleted;
        
        /// <remarks/>
        public event CaptureCompletedEventHandler CaptureCompleted;
        
        /// <remarks/>
        public event Capture2CompletedEventHandler Capture2Completed;
        
        /// <remarks/>
        public event Capture3CompletedEventHandler Capture3Completed;
        
        /// <remarks/>
        public event Capture4CompletedEventHandler Capture4Completed;
        
        /// <remarks/>
        public event SaleEVCCompletedEventHandler SaleEVCCompleted;
        
        /// <remarks/>
        public event AuthorizeEVCCompletedEventHandler AuthorizeEVCCompleted;
        
        /// <remarks/>
        public event AddSingleOrderLineCompletedEventHandler AddSingleOrderLineCompleted;
        
        /// <remarks/>
        public event AddMultipleOrderLinesCompletedEventHandler AddMultipleOrderLinesCompleted;
        
        /// <remarks/>
        public event PrepareSaleDDCompletedEventHandler PrepareSaleDDCompleted;
        
        /// <remarks/>
        public event PrepareSaleDD2CompletedEventHandler PrepareSaleDD2Completed;
        
        /// <remarks/>
        public event PrepareAuthorizeDDCompletedEventHandler PrepareAuthorizeDDCompleted;
        
        /// <remarks/>
        public event SaleInvoiceCompletedEventHandler SaleInvoiceCompleted;
        
        /// <remarks/>
        public event SaleInvoice2CompletedEventHandler SaleInvoice2Completed;
        
        /// <remarks/>
        public event SaleInvoiceLedgerCompletedEventHandler SaleInvoiceLedgerCompleted;
        
        /// <remarks/>
        public event AddLoanCompletedEventHandler AddLoanCompleted;
        
        /// <remarks/>
        public event CalculateLoanCompletedEventHandler CalculateLoanCompleted;
        
        /// <remarks/>
        public event SaleLoanCompletedEventHandler SaleLoanCompleted;
        
        /// <remarks/>
        public event AuthorizeLoanCompletedEventHandler AuthorizeLoanCompleted;
        
        /// <remarks/>
        public event AddOrderAddressCompletedEventHandler AddOrderAddressCompleted;
        
        /// <remarks/>
        public event AddOrderAddress2CompletedEventHandler AddOrderAddress2Completed;
        
        /// <remarks/>
        public event AuthorizeGCCompletedEventHandler AuthorizeGCCompleted;
        
        /// <remarks/>
        public event SaleGCCompletedEventHandler SaleGCCompleted;
        
        /// <remarks/>
        public event GetTransactionDetails2CompletedEventHandler GetTransactionDetails2Completed;
        
        /// <remarks/>
        public event GetTransactionDetailsCompletedEventHandler GetTransactionDetailsCompleted;
        
        /// <remarks/>
        public event TransactionCheck2CompletedEventHandler TransactionCheck2Completed;
        
        /// <remarks/>
        public event AuthorizeInvoiceCompletedEventHandler AuthorizeInvoiceCompleted;
        
        /// <remarks/>
        public event AuthorizeInvoiceLedgerCompletedEventHandler AuthorizeInvoiceLedgerCompleted;
        
        /// <remarks/>
        public event PurchaseInvoicePrivateCompletedEventHandler PurchaseInvoicePrivateCompleted;
        
        /// <remarks/>
        public event PurchaseInvoiceCorporateCompletedEventHandler PurchaseInvoiceCorporateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Initialize7", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Initialize7(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string additionalValues, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash) {
            object[] results = this.Invoke("Initialize7", new object[] {
                        accountNumber,
                        purchaseOperation,
                        price,
                        priceArgList,
                        currency,
                        vat,
                        orderID,
                        productNumber,
                        description,
                        clientIPAddress,
                        clientIdentifier,
                        additionalValues,
                        externalID,
                        returnUrl,
                        view,
                        agreementRef,
                        cancelUrl,
                        clientLanguage,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Initialize7Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string additionalValues, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash) {
            this.Initialize7Async(accountNumber, purchaseOperation, price, priceArgList, currency, vat, orderID, productNumber, description, clientIPAddress, clientIdentifier, additionalValues, externalID, returnUrl, view, agreementRef, cancelUrl, clientLanguage, hash, null);
        }
        
        /// <remarks/>
        public void Initialize7Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string additionalValues, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash, 
                    object userState) {
            if ((this.Initialize7OperationCompleted == null)) {
                this.Initialize7OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitialize7OperationCompleted);
            }
            this.InvokeAsync("Initialize7", new object[] {
                        accountNumber,
                        purchaseOperation,
                        price,
                        priceArgList,
                        currency,
                        vat,
                        orderID,
                        productNumber,
                        description,
                        clientIPAddress,
                        clientIdentifier,
                        additionalValues,
                        externalID,
                        returnUrl,
                        view,
                        agreementRef,
                        cancelUrl,
                        clientLanguage,
                        hash}, this.Initialize7OperationCompleted, userState);
        }
        
        private void OnInitialize7OperationCompleted(object arg) {
            if ((this.Initialize7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Initialize7Completed(this, new Initialize7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Initialize2", RequestElementName="Initialize2", RequestNamespace="http://external.payex.com/PxOrder/", ResponseElementName="Initialize2Response", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Initialize2Result")]
        public string Initialize(
                    long accountNumber, 
                    string orderType, 
                    string purchaseOperation, 
                    int autoRenew, 
                    string view, 
                    int period, 
                    string orderID, 
                    string productNumber, 
                    string subscriptionNumber, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string description, 
                    string returnURL, 
                    int checkPeriod, 
                    string externalID, 
                    int initialDiscount, 
                    string expireDate, 
                    int expireDateType, 
                    string hash) {
            object[] results = this.Invoke("Initialize", new object[] {
                        accountNumber,
                        orderType,
                        purchaseOperation,
                        autoRenew,
                        view,
                        period,
                        orderID,
                        productNumber,
                        subscriptionNumber,
                        price,
                        priceArgList,
                        vat,
                        description,
                        returnURL,
                        checkPeriod,
                        externalID,
                        initialDiscount,
                        expireDate,
                        expireDateType,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InitializeAsync(
                    long accountNumber, 
                    string orderType, 
                    string purchaseOperation, 
                    int autoRenew, 
                    string view, 
                    int period, 
                    string orderID, 
                    string productNumber, 
                    string subscriptionNumber, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string description, 
                    string returnURL, 
                    int checkPeriod, 
                    string externalID, 
                    int initialDiscount, 
                    string expireDate, 
                    int expireDateType, 
                    string hash) {
            this.InitializeAsync(accountNumber, orderType, purchaseOperation, autoRenew, view, period, orderID, productNumber, subscriptionNumber, price, priceArgList, vat, description, returnURL, checkPeriod, externalID, initialDiscount, expireDate, expireDateType, hash, null);
        }
        
        /// <remarks/>
        public void InitializeAsync(
                    long accountNumber, 
                    string orderType, 
                    string purchaseOperation, 
                    int autoRenew, 
                    string view, 
                    int period, 
                    string orderID, 
                    string productNumber, 
                    string subscriptionNumber, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string description, 
                    string returnURL, 
                    int checkPeriod, 
                    string externalID, 
                    int initialDiscount, 
                    string expireDate, 
                    int expireDateType, 
                    string hash, 
                    object userState) {
            if ((this.InitializeOperationCompleted == null)) {
                this.InitializeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitializeOperationCompleted);
            }
            this.InvokeAsync("Initialize", new object[] {
                        accountNumber,
                        orderType,
                        purchaseOperation,
                        autoRenew,
                        view,
                        period,
                        orderID,
                        productNumber,
                        subscriptionNumber,
                        price,
                        priceArgList,
                        vat,
                        description,
                        returnURL,
                        checkPeriod,
                        externalID,
                        initialDiscount,
                        expireDate,
                        expireDateType,
                        hash}, this.InitializeOperationCompleted, userState);
        }
        
        private void OnInitializeOperationCompleted(object arg) {
            if ((this.InitializeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitializeCompleted(this, new InitializeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Initialize3", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Initialize3(
                    long accountNumber, 
                    string purchaseOperation, 
                    string orderType, 
                    int period, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string hash) {
            object[] results = this.Invoke("Initialize3", new object[] {
                        accountNumber,
                        purchaseOperation,
                        orderType,
                        period,
                        price,
                        priceArgList,
                        vat,
                        orderID,
                        productNumber,
                        description,
                        clientIPAddress,
                        externalID,
                        returnUrl,
                        view,
                        viewType,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Initialize3Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    string orderType, 
                    int period, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string hash) {
            this.Initialize3Async(accountNumber, purchaseOperation, orderType, period, price, priceArgList, vat, orderID, productNumber, description, clientIPAddress, externalID, returnUrl, view, viewType, hash, null);
        }
        
        /// <remarks/>
        public void Initialize3Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    string orderType, 
                    int period, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string hash, 
                    object userState) {
            if ((this.Initialize3OperationCompleted == null)) {
                this.Initialize3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitialize3OperationCompleted);
            }
            this.InvokeAsync("Initialize3", new object[] {
                        accountNumber,
                        purchaseOperation,
                        orderType,
                        period,
                        price,
                        priceArgList,
                        vat,
                        orderID,
                        productNumber,
                        description,
                        clientIPAddress,
                        externalID,
                        returnUrl,
                        view,
                        viewType,
                        hash}, this.Initialize3OperationCompleted, userState);
        }
        
        private void OnInitialize3OperationCompleted(object arg) {
            if ((this.Initialize3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Initialize3Completed(this, new Initialize3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Initialize4", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Initialize4(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string hash) {
            object[] results = this.Invoke("Initialize4", new object[] {
                        accountNumber,
                        purchaseOperation,
                        price,
                        priceArgList,
                        currency,
                        vat,
                        orderID,
                        productNumber,
                        description,
                        clientIPAddress,
                        externalID,
                        returnUrl,
                        view,
                        viewType,
                        agreementRef,
                        cancelUrl,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Initialize4Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string hash) {
            this.Initialize4Async(accountNumber, purchaseOperation, price, priceArgList, currency, vat, orderID, productNumber, description, clientIPAddress, externalID, returnUrl, view, viewType, agreementRef, cancelUrl, hash, null);
        }
        
        /// <remarks/>
        public void Initialize4Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string hash, 
                    object userState) {
            if ((this.Initialize4OperationCompleted == null)) {
                this.Initialize4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitialize4OperationCompleted);
            }
            this.InvokeAsync("Initialize4", new object[] {
                        accountNumber,
                        purchaseOperation,
                        price,
                        priceArgList,
                        currency,
                        vat,
                        orderID,
                        productNumber,
                        description,
                        clientIPAddress,
                        externalID,
                        returnUrl,
                        view,
                        viewType,
                        agreementRef,
                        cancelUrl,
                        hash}, this.Initialize4OperationCompleted, userState);
        }
        
        private void OnInitialize4OperationCompleted(object arg) {
            if ((this.Initialize4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Initialize4Completed(this, new Initialize4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Initialize5", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Initialize5(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string hash) {
            object[] results = this.Invoke("Initialize5", new object[] {
                        accountNumber,
                        purchaseOperation,
                        price,
                        priceArgList,
                        currency,
                        vat,
                        orderID,
                        productNumber,
                        description,
                        clientIPAddress,
                        clientIdentifier,
                        externalID,
                        returnUrl,
                        view,
                        viewType,
                        agreementRef,
                        cancelUrl,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Initialize5Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string hash) {
            this.Initialize5Async(accountNumber, purchaseOperation, price, priceArgList, currency, vat, orderID, productNumber, description, clientIPAddress, clientIdentifier, externalID, returnUrl, view, viewType, agreementRef, cancelUrl, hash, null);
        }
        
        /// <remarks/>
        public void Initialize5Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string hash, 
                    object userState) {
            if ((this.Initialize5OperationCompleted == null)) {
                this.Initialize5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitialize5OperationCompleted);
            }
            this.InvokeAsync("Initialize5", new object[] {
                        accountNumber,
                        purchaseOperation,
                        price,
                        priceArgList,
                        currency,
                        vat,
                        orderID,
                        productNumber,
                        description,
                        clientIPAddress,
                        clientIdentifier,
                        externalID,
                        returnUrl,
                        view,
                        viewType,
                        agreementRef,
                        cancelUrl,
                        hash}, this.Initialize5OperationCompleted, userState);
        }
        
        private void OnInitialize5OperationCompleted(object arg) {
            if ((this.Initialize5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Initialize5Completed(this, new Initialize5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Initialize6", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Initialize6(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash) {
            object[] results = this.Invoke("Initialize6", new object[] {
                        accountNumber,
                        purchaseOperation,
                        price,
                        priceArgList,
                        currency,
                        vat,
                        orderID,
                        productNumber,
                        description,
                        clientIPAddress,
                        clientIdentifier,
                        externalID,
                        returnUrl,
                        view,
                        viewType,
                        agreementRef,
                        cancelUrl,
                        clientLanguage,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Initialize6Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash) {
            this.Initialize6Async(accountNumber, purchaseOperation, price, priceArgList, currency, vat, orderID, productNumber, description, clientIPAddress, clientIdentifier, externalID, returnUrl, view, viewType, agreementRef, cancelUrl, clientLanguage, hash, null);
        }
        
        /// <remarks/>
        public void Initialize6Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash, 
                    object userState) {
            if ((this.Initialize6OperationCompleted == null)) {
                this.Initialize6OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitialize6OperationCompleted);
            }
            this.InvokeAsync("Initialize6", new object[] {
                        accountNumber,
                        purchaseOperation,
                        price,
                        priceArgList,
                        currency,
                        vat,
                        orderID,
                        productNumber,
                        description,
                        clientIPAddress,
                        clientIdentifier,
                        externalID,
                        returnUrl,
                        view,
                        viewType,
                        agreementRef,
                        cancelUrl,
                        clientLanguage,
                        hash}, this.Initialize6OperationCompleted, userState);
        }
        
        private void OnInitialize6OperationCompleted(object arg) {
            if ((this.Initialize6Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Initialize6Completed(this, new Initialize6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Initialize1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Initialize", RequestElementName="Initialize", RequestNamespace="http://external.payex.com/PxOrder/", ResponseElementName="InitializeResponse", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InitializeResult")]
        public string Initialize(
                    long accountNumber, 
                    string orderType, 
                    string purchaseOperation, 
                    int autoRenew, 
                    string view, 
                    int period, 
                    string orderID, 
                    string productNumber, 
                    string subscriptionNumber, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string description, 
                    string returnURL, 
                    int checkPeriod, 
                    string externalID, 
                    string hash) {
            object[] results = this.Invoke("Initialize1", new object[] {
                        accountNumber,
                        orderType,
                        purchaseOperation,
                        autoRenew,
                        view,
                        period,
                        orderID,
                        productNumber,
                        subscriptionNumber,
                        price,
                        priceArgList,
                        vat,
                        description,
                        returnURL,
                        checkPeriod,
                        externalID,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Initialize1Async(
                    long accountNumber, 
                    string orderType, 
                    string purchaseOperation, 
                    int autoRenew, 
                    string view, 
                    int period, 
                    string orderID, 
                    string productNumber, 
                    string subscriptionNumber, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string description, 
                    string returnURL, 
                    int checkPeriod, 
                    string externalID, 
                    string hash) {
            this.Initialize1Async(accountNumber, orderType, purchaseOperation, autoRenew, view, period, orderID, productNumber, subscriptionNumber, price, priceArgList, vat, description, returnURL, checkPeriod, externalID, hash, null);
        }
        
        /// <remarks/>
        public void Initialize1Async(
                    long accountNumber, 
                    string orderType, 
                    string purchaseOperation, 
                    int autoRenew, 
                    string view, 
                    int period, 
                    string orderID, 
                    string productNumber, 
                    string subscriptionNumber, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string description, 
                    string returnURL, 
                    int checkPeriod, 
                    string externalID, 
                    string hash, 
                    object userState) {
            if ((this.Initialize1OperationCompleted == null)) {
                this.Initialize1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitialize1OperationCompleted);
            }
            this.InvokeAsync("Initialize1", new object[] {
                        accountNumber,
                        orderType,
                        purchaseOperation,
                        autoRenew,
                        view,
                        period,
                        orderID,
                        productNumber,
                        subscriptionNumber,
                        price,
                        priceArgList,
                        vat,
                        description,
                        returnURL,
                        checkPeriod,
                        externalID,
                        hash}, this.Initialize1OperationCompleted, userState);
        }
        
        private void OnInitialize1OperationCompleted(object arg) {
            if ((this.Initialize1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Initialize1Completed(this, new Initialize1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/InitializeBasic", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InitializeBasic(long accountNumber, string purchaseOperation, string orderID, string productNumber, string priceArgList, string description, string returnURL, string hash) {
            object[] results = this.Invoke("InitializeBasic", new object[] {
                        accountNumber,
                        purchaseOperation,
                        orderID,
                        productNumber,
                        priceArgList,
                        description,
                        returnURL,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InitializeBasicAsync(long accountNumber, string purchaseOperation, string orderID, string productNumber, string priceArgList, string description, string returnURL, string hash) {
            this.InitializeBasicAsync(accountNumber, purchaseOperation, orderID, productNumber, priceArgList, description, returnURL, hash, null);
        }
        
        /// <remarks/>
        public void InitializeBasicAsync(long accountNumber, string purchaseOperation, string orderID, string productNumber, string priceArgList, string description, string returnURL, string hash, object userState) {
            if ((this.InitializeBasicOperationCompleted == null)) {
                this.InitializeBasicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitializeBasicOperationCompleted);
            }
            this.InvokeAsync("InitializeBasic", new object[] {
                        accountNumber,
                        purchaseOperation,
                        orderID,
                        productNumber,
                        priceArgList,
                        description,
                        returnURL,
                        hash}, this.InitializeBasicOperationCompleted, userState);
        }
        
        private void OnInitializeBasicOperationCompleted(object arg) {
            if ((this.InitializeBasicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitializeBasicCompleted(this, new InitializeBasicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Complete", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Complete(long accountNumber, string orderRef, string hash) {
            object[] results = this.Invoke("Complete", new object[] {
                        accountNumber,
                        orderRef,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteAsync(long accountNumber, string orderRef, string hash) {
            this.CompleteAsync(accountNumber, orderRef, hash, null);
        }
        
        /// <remarks/>
        public void CompleteAsync(long accountNumber, string orderRef, string hash, object userState) {
            if ((this.CompleteOperationCompleted == null)) {
                this.CompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteOperationCompleted);
            }
            this.InvokeAsync("Complete", new object[] {
                        accountNumber,
                        orderRef,
                        hash}, this.CompleteOperationCompleted, userState);
        }
        
        private void OnCompleteOperationCompleted(object arg) {
            if ((this.CompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteCompleted(this, new CompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Check2", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Check2(long accountNumber, int transactionNumber, string hash) {
            object[] results = this.Invoke("Check2", new object[] {
                        accountNumber,
                        transactionNumber,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Check2Async(long accountNumber, int transactionNumber, string hash) {
            this.Check2Async(accountNumber, transactionNumber, hash, null);
        }
        
        /// <remarks/>
        public void Check2Async(long accountNumber, int transactionNumber, string hash, object userState) {
            if ((this.Check2OperationCompleted == null)) {
                this.Check2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheck2OperationCompleted);
            }
            this.InvokeAsync("Check2", new object[] {
                        accountNumber,
                        transactionNumber,
                        hash}, this.Check2OperationCompleted, userState);
        }
        
        private void OnCheck2OperationCompleted(object arg) {
            if ((this.Check2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Check2Completed(this, new Check2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Check", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Check(long accountNumber, string transactionRef, string hash) {
            object[] results = this.Invoke("Check", new object[] {
                        accountNumber,
                        transactionRef,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAsync(long accountNumber, string transactionRef, string hash) {
            this.CheckAsync(accountNumber, transactionRef, hash, null);
        }
        
        /// <remarks/>
        public void CheckAsync(long accountNumber, string transactionRef, string hash, object userState) {
            if ((this.CheckOperationCompleted == null)) {
                this.CheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOperationCompleted);
            }
            this.InvokeAsync("Check", new object[] {
                        accountNumber,
                        transactionRef,
                        hash}, this.CheckOperationCompleted, userState);
        }
        
        private void OnCheckOperationCompleted(object arg) {
            if ((this.CheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCompleted(this, new CheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/SalePX", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SalePX(long accountNumber, string orderRef, int userType, string userRef, string password, string hash) {
            object[] results = this.Invoke("SalePX", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        password,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SalePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash) {
            this.SalePXAsync(accountNumber, orderRef, userType, userRef, password, hash, null);
        }
        
        /// <remarks/>
        public void SalePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash, object userState) {
            if ((this.SalePXOperationCompleted == null)) {
                this.SalePXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSalePXOperationCompleted);
            }
            this.InvokeAsync("SalePX", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        password,
                        hash}, this.SalePXOperationCompleted, userState);
        }
        
        private void OnSalePXOperationCompleted(object arg) {
            if ((this.SalePXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SalePXCompleted(this, new SalePXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AuthorizePX", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthorizePX(long accountNumber, string orderRef, int userType, string userRef, string password, string hash) {
            object[] results = this.Invoke("AuthorizePX", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        password,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash) {
            this.AuthorizePXAsync(accountNumber, orderRef, userType, userRef, password, hash, null);
        }
        
        /// <remarks/>
        public void AuthorizePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash, object userState) {
            if ((this.AuthorizePXOperationCompleted == null)) {
                this.AuthorizePXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizePXOperationCompleted);
            }
            this.InvokeAsync("AuthorizePX", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        password,
                        hash}, this.AuthorizePXOperationCompleted, userState);
        }
        
        private void OnAuthorizePXOperationCompleted(object arg) {
            if ((this.AuthorizePXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizePXCompleted(this, new AuthorizePXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/PurchasePX", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PurchasePX(long accountNumber, string orderRef, int userType, string userRef, string password, string hash) {
            object[] results = this.Invoke("PurchasePX", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        password,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PurchasePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash) {
            this.PurchasePXAsync(accountNumber, orderRef, userType, userRef, password, hash, null);
        }
        
        /// <remarks/>
        public void PurchasePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash, object userState) {
            if ((this.PurchasePXOperationCompleted == null)) {
                this.PurchasePXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchasePXOperationCompleted);
            }
            this.InvokeAsync("PurchasePX", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        password,
                        hash}, this.PurchasePXOperationCompleted, userState);
        }
        
        private void OnPurchasePXOperationCompleted(object arg) {
            if ((this.PurchasePXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchasePXCompleted(this, new PurchasePXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/PurchaseActivate", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PurchaseActivate(long accountNumber, int transactionNumber, string hash) {
            object[] results = this.Invoke("PurchaseActivate", new object[] {
                        accountNumber,
                        transactionNumber,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseActivateAsync(long accountNumber, int transactionNumber, string hash) {
            this.PurchaseActivateAsync(accountNumber, transactionNumber, hash, null);
        }
        
        /// <remarks/>
        public void PurchaseActivateAsync(long accountNumber, int transactionNumber, string hash, object userState) {
            if ((this.PurchaseActivateOperationCompleted == null)) {
                this.PurchaseActivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseActivateOperationCompleted);
            }
            this.InvokeAsync("PurchaseActivate", new object[] {
                        accountNumber,
                        transactionNumber,
                        hash}, this.PurchaseActivateOperationCompleted, userState);
        }
        
        private void OnPurchaseActivateOperationCompleted(object arg) {
            if ((this.PurchaseActivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseActivateCompleted(this, new PurchaseActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/PurchaseCA", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PurchaseCA(long accountNumber, string orderRef, long clientAccountNumber, string password, string hash) {
            object[] results = this.Invoke("PurchaseCA", new object[] {
                        accountNumber,
                        orderRef,
                        clientAccountNumber,
                        password,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseCAAsync(long accountNumber, string orderRef, long clientAccountNumber, string password, string hash) {
            this.PurchaseCAAsync(accountNumber, orderRef, clientAccountNumber, password, hash, null);
        }
        
        /// <remarks/>
        public void PurchaseCAAsync(long accountNumber, string orderRef, long clientAccountNumber, string password, string hash, object userState) {
            if ((this.PurchaseCAOperationCompleted == null)) {
                this.PurchaseCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseCAOperationCompleted);
            }
            this.InvokeAsync("PurchaseCA", new object[] {
                        accountNumber,
                        orderRef,
                        clientAccountNumber,
                        password,
                        hash}, this.PurchaseCAOperationCompleted, userState);
        }
        
        private void OnPurchaseCAOperationCompleted(object arg) {
            if ((this.PurchaseCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseCACompleted(this, new PurchaseCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/PurchaseOTT", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PurchaseOTT(long accountNumber, string orderRef, int identifierType, string identifierRef, string hash) {
            object[] results = this.Invoke("PurchaseOTT", new object[] {
                        accountNumber,
                        orderRef,
                        identifierType,
                        identifierRef,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseOTTAsync(long accountNumber, string orderRef, int identifierType, string identifierRef, string hash) {
            this.PurchaseOTTAsync(accountNumber, orderRef, identifierType, identifierRef, hash, null);
        }
        
        /// <remarks/>
        public void PurchaseOTTAsync(long accountNumber, string orderRef, int identifierType, string identifierRef, string hash, object userState) {
            if ((this.PurchaseOTTOperationCompleted == null)) {
                this.PurchaseOTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseOTTOperationCompleted);
            }
            this.InvokeAsync("PurchaseOTT", new object[] {
                        accountNumber,
                        orderRef,
                        identifierType,
                        identifierRef,
                        hash}, this.PurchaseOTTOperationCompleted, userState);
        }
        
        private void OnPurchaseOTTOperationCompleted(object arg) {
            if ((this.PurchaseOTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseOTTCompleted(this, new PurchaseOTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/SaleCPA", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaleCPA(long accountNumber, string orderRef, int userType, string userRef, string password, string hash) {
            object[] results = this.Invoke("SaleCPA", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        password,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaleCPAAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash) {
            this.SaleCPAAsync(accountNumber, orderRef, userType, userRef, password, hash, null);
        }
        
        /// <remarks/>
        public void SaleCPAAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash, object userState) {
            if ((this.SaleCPAOperationCompleted == null)) {
                this.SaleCPAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleCPAOperationCompleted);
            }
            this.InvokeAsync("SaleCPA", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        password,
                        hash}, this.SaleCPAOperationCompleted, userState);
        }
        
        private void OnSaleCPAOperationCompleted(object arg) {
            if ((this.SaleCPACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleCPACompleted(this, new SaleCPACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/SaleCA", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaleCA(long accountNumber, string orderRef, long clientAccountNumber, string password, string hash) {
            object[] results = this.Invoke("SaleCA", new object[] {
                        accountNumber,
                        orderRef,
                        clientAccountNumber,
                        password,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaleCAAsync(long accountNumber, string orderRef, long clientAccountNumber, string password, string hash) {
            this.SaleCAAsync(accountNumber, orderRef, clientAccountNumber, password, hash, null);
        }
        
        /// <remarks/>
        public void SaleCAAsync(long accountNumber, string orderRef, long clientAccountNumber, string password, string hash, object userState) {
            if ((this.SaleCAOperationCompleted == null)) {
                this.SaleCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleCAOperationCompleted);
            }
            this.InvokeAsync("SaleCA", new object[] {
                        accountNumber,
                        orderRef,
                        clientAccountNumber,
                        password,
                        hash}, this.SaleCAOperationCompleted, userState);
        }
        
        private void OnSaleCAOperationCompleted(object arg) {
            if ((this.SaleCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleCACompleted(this, new SaleCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AuthorizeCA", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthorizeCA(long accountNumber, string orderRef, long clientAccountNumber, string password, string hash) {
            object[] results = this.Invoke("AuthorizeCA", new object[] {
                        accountNumber,
                        orderRef,
                        clientAccountNumber,
                        password,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeCAAsync(long accountNumber, string orderRef, long clientAccountNumber, string password, string hash) {
            this.AuthorizeCAAsync(accountNumber, orderRef, clientAccountNumber, password, hash, null);
        }
        
        /// <remarks/>
        public void AuthorizeCAAsync(long accountNumber, string orderRef, long clientAccountNumber, string password, string hash, object userState) {
            if ((this.AuthorizeCAOperationCompleted == null)) {
                this.AuthorizeCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeCAOperationCompleted);
            }
            this.InvokeAsync("AuthorizeCA", new object[] {
                        accountNumber,
                        orderRef,
                        clientAccountNumber,
                        password,
                        hash}, this.AuthorizeCAOperationCompleted, userState);
        }
        
        private void OnAuthorizeCAOperationCompleted(object arg) {
            if ((this.AuthorizeCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeCACompleted(this, new AuthorizeCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/ReserveIVR", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReserveIVR(long accountNumber, string orderRef, string hash) {
            object[] results = this.Invoke("ReserveIVR", new object[] {
                        accountNumber,
                        orderRef,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReserveIVRAsync(long accountNumber, string orderRef, string hash) {
            this.ReserveIVRAsync(accountNumber, orderRef, hash, null);
        }
        
        /// <remarks/>
        public void ReserveIVRAsync(long accountNumber, string orderRef, string hash, object userState) {
            if ((this.ReserveIVROperationCompleted == null)) {
                this.ReserveIVROperationCompleted = new System.Threading.SendOrPostCallback(this.OnReserveIVROperationCompleted);
            }
            this.InvokeAsync("ReserveIVR", new object[] {
                        accountNumber,
                        orderRef,
                        hash}, this.ReserveIVROperationCompleted, userState);
        }
        
        private void OnReserveIVROperationCompleted(object arg) {
            if ((this.ReserveIVRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReserveIVRCompleted(this, new ReserveIVRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/SaleIVR", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaleIVR(long accountNumber, string orderRef, int userType, string userRef, string ivrCode, string hash) {
            object[] results = this.Invoke("SaleIVR", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        ivrCode,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaleIVRAsync(long accountNumber, string orderRef, int userType, string userRef, string ivrCode, string hash) {
            this.SaleIVRAsync(accountNumber, orderRef, userType, userRef, ivrCode, hash, null);
        }
        
        /// <remarks/>
        public void SaleIVRAsync(long accountNumber, string orderRef, int userType, string userRef, string ivrCode, string hash, object userState) {
            if ((this.SaleIVROperationCompleted == null)) {
                this.SaleIVROperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleIVROperationCompleted);
            }
            this.InvokeAsync("SaleIVR", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        ivrCode,
                        hash}, this.SaleIVROperationCompleted, userState);
        }
        
        private void OnSaleIVROperationCompleted(object arg) {
            if ((this.SaleIVRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleIVRCompleted(this, new SaleIVRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Cancel2", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Cancel2(long accountNumber, int transactionNumber, string hash) {
            object[] results = this.Invoke("Cancel2", new object[] {
                        accountNumber,
                        transactionNumber,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Cancel2Async(long accountNumber, int transactionNumber, string hash) {
            this.Cancel2Async(accountNumber, transactionNumber, hash, null);
        }
        
        /// <remarks/>
        public void Cancel2Async(long accountNumber, int transactionNumber, string hash, object userState) {
            if ((this.Cancel2OperationCompleted == null)) {
                this.Cancel2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancel2OperationCompleted);
            }
            this.InvokeAsync("Cancel2", new object[] {
                        accountNumber,
                        transactionNumber,
                        hash}, this.Cancel2OperationCompleted, userState);
        }
        
        private void OnCancel2OperationCompleted(object arg) {
            if ((this.Cancel2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Cancel2Completed(this, new Cancel2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Cancel", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Cancel(long accountNumber, string transactionRef, string hash) {
            object[] results = this.Invoke("Cancel", new object[] {
                        accountNumber,
                        transactionRef,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelAsync(long accountNumber, string transactionRef, string hash) {
            this.CancelAsync(accountNumber, transactionRef, hash, null);
        }
        
        /// <remarks/>
        public void CancelAsync(long accountNumber, string transactionRef, string hash, object userState) {
            if ((this.CancelOperationCompleted == null)) {
                this.CancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelOperationCompleted);
            }
            this.InvokeAsync("Cancel", new object[] {
                        accountNumber,
                        transactionRef,
                        hash}, this.CancelOperationCompleted, userState);
        }
        
        private void OnCancelOperationCompleted(object arg) {
            if ((this.CancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelCompleted(this, new CancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Credit2", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Credit2(long accountNumber, int transactionNumber, int amount, string hash) {
            object[] results = this.Invoke("Credit2", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Credit2Async(long accountNumber, int transactionNumber, int amount, string hash) {
            this.Credit2Async(accountNumber, transactionNumber, amount, hash, null);
        }
        
        /// <remarks/>
        public void Credit2Async(long accountNumber, int transactionNumber, int amount, string hash, object userState) {
            if ((this.Credit2OperationCompleted == null)) {
                this.Credit2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCredit2OperationCompleted);
            }
            this.InvokeAsync("Credit2", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        hash}, this.Credit2OperationCompleted, userState);
        }
        
        private void OnCredit2OperationCompleted(object arg) {
            if ((this.Credit2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Credit2Completed(this, new Credit2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Credit3", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Credit3(long accountNumber, int transactionNumber, int amount, string orderId, string hash) {
            object[] results = this.Invoke("Credit3", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        orderId,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Credit3Async(long accountNumber, int transactionNumber, int amount, string orderId, string hash) {
            this.Credit3Async(accountNumber, transactionNumber, amount, orderId, hash, null);
        }
        
        /// <remarks/>
        public void Credit3Async(long accountNumber, int transactionNumber, int amount, string orderId, string hash, object userState) {
            if ((this.Credit3OperationCompleted == null)) {
                this.Credit3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCredit3OperationCompleted);
            }
            this.InvokeAsync("Credit3", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        orderId,
                        hash}, this.Credit3OperationCompleted, userState);
        }
        
        private void OnCredit3OperationCompleted(object arg) {
            if ((this.Credit3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Credit3Completed(this, new Credit3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Credit4", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Credit4(long accountNumber, int transactionNumber, int amount, string orderId, int vatAmount, string additionalValues, string hash) {
            object[] results = this.Invoke("Credit4", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        orderId,
                        vatAmount,
                        additionalValues,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Credit4Async(long accountNumber, int transactionNumber, int amount, string orderId, int vatAmount, string additionalValues, string hash) {
            this.Credit4Async(accountNumber, transactionNumber, amount, orderId, vatAmount, additionalValues, hash, null);
        }
        
        /// <remarks/>
        public void Credit4Async(long accountNumber, int transactionNumber, int amount, string orderId, int vatAmount, string additionalValues, string hash, object userState) {
            if ((this.Credit4OperationCompleted == null)) {
                this.Credit4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCredit4OperationCompleted);
            }
            this.InvokeAsync("Credit4", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        orderId,
                        vatAmount,
                        additionalValues,
                        hash}, this.Credit4OperationCompleted, userState);
        }
        
        private void OnCredit4OperationCompleted(object arg) {
            if ((this.Credit4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Credit4Completed(this, new Credit4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Credit", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Credit(long accountNumber, string transactionRef, int amount, string hash) {
            object[] results = this.Invoke("Credit", new object[] {
                        accountNumber,
                        transactionRef,
                        amount,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreditAsync(long accountNumber, string transactionRef, int amount, string hash) {
            this.CreditAsync(accountNumber, transactionRef, amount, hash, null);
        }
        
        /// <remarks/>
        public void CreditAsync(long accountNumber, string transactionRef, int amount, string hash, object userState) {
            if ((this.CreditOperationCompleted == null)) {
                this.CreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditOperationCompleted);
            }
            this.InvokeAsync("Credit", new object[] {
                        accountNumber,
                        transactionRef,
                        amount,
                        hash}, this.CreditOperationCompleted, userState);
        }
        
        private void OnCreditOperationCompleted(object arg) {
            if ((this.CreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCompleted(this, new CreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/CreditOrderLine2", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreditOrderLine2(long accountNumber, int transactionNumber, string itemNumber, string hash) {
            object[] results = this.Invoke("CreditOrderLine2", new object[] {
                        accountNumber,
                        transactionNumber,
                        itemNumber,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreditOrderLine2Async(long accountNumber, int transactionNumber, string itemNumber, string hash) {
            this.CreditOrderLine2Async(accountNumber, transactionNumber, itemNumber, hash, null);
        }
        
        /// <remarks/>
        public void CreditOrderLine2Async(long accountNumber, int transactionNumber, string itemNumber, string hash, object userState) {
            if ((this.CreditOrderLine2OperationCompleted == null)) {
                this.CreditOrderLine2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditOrderLine2OperationCompleted);
            }
            this.InvokeAsync("CreditOrderLine2", new object[] {
                        accountNumber,
                        transactionNumber,
                        itemNumber,
                        hash}, this.CreditOrderLine2OperationCompleted, userState);
        }
        
        private void OnCreditOrderLine2OperationCompleted(object arg) {
            if ((this.CreditOrderLine2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditOrderLine2Completed(this, new CreditOrderLine2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/CreditOrderLine3", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreditOrderLine3(long accountNumber, int transactionNumber, string itemNumber, string orderId, string hash) {
            object[] results = this.Invoke("CreditOrderLine3", new object[] {
                        accountNumber,
                        transactionNumber,
                        itemNumber,
                        orderId,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreditOrderLine3Async(long accountNumber, int transactionNumber, string itemNumber, string orderId, string hash) {
            this.CreditOrderLine3Async(accountNumber, transactionNumber, itemNumber, orderId, hash, null);
        }
        
        /// <remarks/>
        public void CreditOrderLine3Async(long accountNumber, int transactionNumber, string itemNumber, string orderId, string hash, object userState) {
            if ((this.CreditOrderLine3OperationCompleted == null)) {
                this.CreditOrderLine3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditOrderLine3OperationCompleted);
            }
            this.InvokeAsync("CreditOrderLine3", new object[] {
                        accountNumber,
                        transactionNumber,
                        itemNumber,
                        orderId,
                        hash}, this.CreditOrderLine3OperationCompleted, userState);
        }
        
        private void OnCreditOrderLine3OperationCompleted(object arg) {
            if ((this.CreditOrderLine3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditOrderLine3Completed(this, new CreditOrderLine3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/CreditOrderLine", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreditOrderLine(long accountNumber, string transactionRef, string itemNumber, string hash) {
            object[] results = this.Invoke("CreditOrderLine", new object[] {
                        accountNumber,
                        transactionRef,
                        itemNumber,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreditOrderLineAsync(long accountNumber, string transactionRef, string itemNumber, string hash) {
            this.CreditOrderLineAsync(accountNumber, transactionRef, itemNumber, hash, null);
        }
        
        /// <remarks/>
        public void CreditOrderLineAsync(long accountNumber, string transactionRef, string itemNumber, string hash, object userState) {
            if ((this.CreditOrderLineOperationCompleted == null)) {
                this.CreditOrderLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditOrderLineOperationCompleted);
            }
            this.InvokeAsync("CreditOrderLine", new object[] {
                        accountNumber,
                        transactionRef,
                        itemNumber,
                        hash}, this.CreditOrderLineOperationCompleted, userState);
        }
        
        private void OnCreditOrderLineOperationCompleted(object arg) {
            if ((this.CreditOrderLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditOrderLineCompleted(this, new CreditOrderLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Capture", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Capture(long accountNumber, string transactionRef, int amount, string hash) {
            object[] results = this.Invoke("Capture", new object[] {
                        accountNumber,
                        transactionRef,
                        amount,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CaptureAsync(long accountNumber, string transactionRef, int amount, string hash) {
            this.CaptureAsync(accountNumber, transactionRef, amount, hash, null);
        }
        
        /// <remarks/>
        public void CaptureAsync(long accountNumber, string transactionRef, int amount, string hash, object userState) {
            if ((this.CaptureOperationCompleted == null)) {
                this.CaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCaptureOperationCompleted);
            }
            this.InvokeAsync("Capture", new object[] {
                        accountNumber,
                        transactionRef,
                        amount,
                        hash}, this.CaptureOperationCompleted, userState);
        }
        
        private void OnCaptureOperationCompleted(object arg) {
            if ((this.CaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CaptureCompleted(this, new CaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Capture2", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Capture2(long accountNumber, int transactionNumber, int amount, string hash) {
            object[] results = this.Invoke("Capture2", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Capture2Async(long accountNumber, int transactionNumber, int amount, string hash) {
            this.Capture2Async(accountNumber, transactionNumber, amount, hash, null);
        }
        
        /// <remarks/>
        public void Capture2Async(long accountNumber, int transactionNumber, int amount, string hash, object userState) {
            if ((this.Capture2OperationCompleted == null)) {
                this.Capture2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCapture2OperationCompleted);
            }
            this.InvokeAsync("Capture2", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        hash}, this.Capture2OperationCompleted, userState);
        }
        
        private void OnCapture2OperationCompleted(object arg) {
            if ((this.Capture2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Capture2Completed(this, new Capture2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Capture3", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Capture3(long accountNumber, int transactionNumber, int amount, string orderId, string hash) {
            object[] results = this.Invoke("Capture3", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        orderId,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Capture3Async(long accountNumber, int transactionNumber, int amount, string orderId, string hash) {
            this.Capture3Async(accountNumber, transactionNumber, amount, orderId, hash, null);
        }
        
        /// <remarks/>
        public void Capture3Async(long accountNumber, int transactionNumber, int amount, string orderId, string hash, object userState) {
            if ((this.Capture3OperationCompleted == null)) {
                this.Capture3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCapture3OperationCompleted);
            }
            this.InvokeAsync("Capture3", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        orderId,
                        hash}, this.Capture3OperationCompleted, userState);
        }
        
        private void OnCapture3OperationCompleted(object arg) {
            if ((this.Capture3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Capture3Completed(this, new Capture3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/Capture4", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Capture4(long accountNumber, int transactionNumber, int amount, string orderId, int vatAmount, string additionalValues, string hash) {
            object[] results = this.Invoke("Capture4", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        orderId,
                        vatAmount,
                        additionalValues,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Capture4Async(long accountNumber, int transactionNumber, int amount, string orderId, int vatAmount, string additionalValues, string hash) {
            this.Capture4Async(accountNumber, transactionNumber, amount, orderId, vatAmount, additionalValues, hash, null);
        }
        
        /// <remarks/>
        public void Capture4Async(long accountNumber, int transactionNumber, int amount, string orderId, int vatAmount, string additionalValues, string hash, object userState) {
            if ((this.Capture4OperationCompleted == null)) {
                this.Capture4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCapture4OperationCompleted);
            }
            this.InvokeAsync("Capture4", new object[] {
                        accountNumber,
                        transactionNumber,
                        amount,
                        orderId,
                        vatAmount,
                        additionalValues,
                        hash}, this.Capture4OperationCompleted, userState);
        }
        
        private void OnCapture4OperationCompleted(object arg) {
            if ((this.Capture4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Capture4Completed(this, new Capture4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/SaleEVC", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaleEVC(long accountNumber, string orderRef, int userType, string userRef, string valueCode, string clientIPAddress, string hash) {
            object[] results = this.Invoke("SaleEVC", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        valueCode,
                        clientIPAddress,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaleEVCAsync(long accountNumber, string orderRef, int userType, string userRef, string valueCode, string clientIPAddress, string hash) {
            this.SaleEVCAsync(accountNumber, orderRef, userType, userRef, valueCode, clientIPAddress, hash, null);
        }
        
        /// <remarks/>
        public void SaleEVCAsync(long accountNumber, string orderRef, int userType, string userRef, string valueCode, string clientIPAddress, string hash, object userState) {
            if ((this.SaleEVCOperationCompleted == null)) {
                this.SaleEVCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleEVCOperationCompleted);
            }
            this.InvokeAsync("SaleEVC", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        valueCode,
                        clientIPAddress,
                        hash}, this.SaleEVCOperationCompleted, userState);
        }
        
        private void OnSaleEVCOperationCompleted(object arg) {
            if ((this.SaleEVCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleEVCCompleted(this, new SaleEVCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AuthorizeEVC", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthorizeEVC(long accountNumber, string orderRef, int userType, string userRef, string valueCode, string clientIPAddress, string hash) {
            object[] results = this.Invoke("AuthorizeEVC", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        valueCode,
                        clientIPAddress,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeEVCAsync(long accountNumber, string orderRef, int userType, string userRef, string valueCode, string clientIPAddress, string hash) {
            this.AuthorizeEVCAsync(accountNumber, orderRef, userType, userRef, valueCode, clientIPAddress, hash, null);
        }
        
        /// <remarks/>
        public void AuthorizeEVCAsync(long accountNumber, string orderRef, int userType, string userRef, string valueCode, string clientIPAddress, string hash, object userState) {
            if ((this.AuthorizeEVCOperationCompleted == null)) {
                this.AuthorizeEVCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeEVCOperationCompleted);
            }
            this.InvokeAsync("AuthorizeEVC", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        valueCode,
                        clientIPAddress,
                        hash}, this.AuthorizeEVCOperationCompleted, userState);
        }
        
        private void OnAuthorizeEVCOperationCompleted(object arg) {
            if ((this.AuthorizeEVCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeEVCCompleted(this, new AuthorizeEVCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AddSingleOrderLine", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddSingleOrderLine(long accountNumber, string orderRef, string itemNumber, string itemDescription1, string itemDescription2, string itemDescription3, string itemDescription4, string itemDescription5, int quantity, int amount, int vatPrice, int vatPercent, string hash) {
            object[] results = this.Invoke("AddSingleOrderLine", new object[] {
                        accountNumber,
                        orderRef,
                        itemNumber,
                        itemDescription1,
                        itemDescription2,
                        itemDescription3,
                        itemDescription4,
                        itemDescription5,
                        quantity,
                        amount,
                        vatPrice,
                        vatPercent,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddSingleOrderLineAsync(long accountNumber, string orderRef, string itemNumber, string itemDescription1, string itemDescription2, string itemDescription3, string itemDescription4, string itemDescription5, int quantity, int amount, int vatPrice, int vatPercent, string hash) {
            this.AddSingleOrderLineAsync(accountNumber, orderRef, itemNumber, itemDescription1, itemDescription2, itemDescription3, itemDescription4, itemDescription5, quantity, amount, vatPrice, vatPercent, hash, null);
        }
        
        /// <remarks/>
        public void AddSingleOrderLineAsync(long accountNumber, string orderRef, string itemNumber, string itemDescription1, string itemDescription2, string itemDescription3, string itemDescription4, string itemDescription5, int quantity, int amount, int vatPrice, int vatPercent, string hash, object userState) {
            if ((this.AddSingleOrderLineOperationCompleted == null)) {
                this.AddSingleOrderLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSingleOrderLineOperationCompleted);
            }
            this.InvokeAsync("AddSingleOrderLine", new object[] {
                        accountNumber,
                        orderRef,
                        itemNumber,
                        itemDescription1,
                        itemDescription2,
                        itemDescription3,
                        itemDescription4,
                        itemDescription5,
                        quantity,
                        amount,
                        vatPrice,
                        vatPercent,
                        hash}, this.AddSingleOrderLineOperationCompleted, userState);
        }
        
        private void OnAddSingleOrderLineOperationCompleted(object arg) {
            if ((this.AddSingleOrderLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSingleOrderLineCompleted(this, new AddSingleOrderLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AddMultipleOrderLines", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddMultipleOrderLines(long accountNumber, string orderRef, int numberOfItems, [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")] [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)] string[][] orderDetails, string hash) {
            object[] results = this.Invoke("AddMultipleOrderLines", new object[] {
                        accountNumber,
                        orderRef,
                        numberOfItems,
                        orderDetails,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddMultipleOrderLinesAsync(long accountNumber, string orderRef, int numberOfItems, string[][] orderDetails, string hash) {
            this.AddMultipleOrderLinesAsync(accountNumber, orderRef, numberOfItems, orderDetails, hash, null);
        }
        
        /// <remarks/>
        public void AddMultipleOrderLinesAsync(long accountNumber, string orderRef, int numberOfItems, string[][] orderDetails, string hash, object userState) {
            if ((this.AddMultipleOrderLinesOperationCompleted == null)) {
                this.AddMultipleOrderLinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMultipleOrderLinesOperationCompleted);
            }
            this.InvokeAsync("AddMultipleOrderLines", new object[] {
                        accountNumber,
                        orderRef,
                        numberOfItems,
                        orderDetails,
                        hash}, this.AddMultipleOrderLinesOperationCompleted, userState);
        }
        
        private void OnAddMultipleOrderLinesOperationCompleted(object arg) {
            if ((this.AddMultipleOrderLinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMultipleOrderLinesCompleted(this, new AddMultipleOrderLinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/PrepareSaleDD", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrepareSaleDD(long accountNumber, string orderRef, int userType, string userRef, string bankName, string clientIPAddress, string clientIdentifier, string hash) {
            object[] results = this.Invoke("PrepareSaleDD", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        bankName,
                        clientIPAddress,
                        clientIdentifier,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareSaleDDAsync(long accountNumber, string orderRef, int userType, string userRef, string bankName, string clientIPAddress, string clientIdentifier, string hash) {
            this.PrepareSaleDDAsync(accountNumber, orderRef, userType, userRef, bankName, clientIPAddress, clientIdentifier, hash, null);
        }
        
        /// <remarks/>
        public void PrepareSaleDDAsync(long accountNumber, string orderRef, int userType, string userRef, string bankName, string clientIPAddress, string clientIdentifier, string hash, object userState) {
            if ((this.PrepareSaleDDOperationCompleted == null)) {
                this.PrepareSaleDDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareSaleDDOperationCompleted);
            }
            this.InvokeAsync("PrepareSaleDD", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        bankName,
                        clientIPAddress,
                        clientIdentifier,
                        hash}, this.PrepareSaleDDOperationCompleted, userState);
        }
        
        private void OnPrepareSaleDDOperationCompleted(object arg) {
            if ((this.PrepareSaleDDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareSaleDDCompleted(this, new PrepareSaleDDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/PrepareSaleDD2", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrepareSaleDD2(long accountNumber, string orderRef, int userType, string userRef, string bankName, string hash) {
            object[] results = this.Invoke("PrepareSaleDD2", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        bankName,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareSaleDD2Async(long accountNumber, string orderRef, int userType, string userRef, string bankName, string hash) {
            this.PrepareSaleDD2Async(accountNumber, orderRef, userType, userRef, bankName, hash, null);
        }
        
        /// <remarks/>
        public void PrepareSaleDD2Async(long accountNumber, string orderRef, int userType, string userRef, string bankName, string hash, object userState) {
            if ((this.PrepareSaleDD2OperationCompleted == null)) {
                this.PrepareSaleDD2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareSaleDD2OperationCompleted);
            }
            this.InvokeAsync("PrepareSaleDD2", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        bankName,
                        hash}, this.PrepareSaleDD2OperationCompleted, userState);
        }
        
        private void OnPrepareSaleDD2OperationCompleted(object arg) {
            if ((this.PrepareSaleDD2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareSaleDD2Completed(this, new PrepareSaleDD2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/PrepareAuthorizeDD", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrepareAuthorizeDD(long accountNumber, string orderRef, int userType, string userRef, string bankName, string hash) {
            object[] results = this.Invoke("PrepareAuthorizeDD", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        bankName,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareAuthorizeDDAsync(long accountNumber, string orderRef, int userType, string userRef, string bankName, string hash) {
            this.PrepareAuthorizeDDAsync(accountNumber, orderRef, userType, userRef, bankName, hash, null);
        }
        
        /// <remarks/>
        public void PrepareAuthorizeDDAsync(long accountNumber, string orderRef, int userType, string userRef, string bankName, string hash, object userState) {
            if ((this.PrepareAuthorizeDDOperationCompleted == null)) {
                this.PrepareAuthorizeDDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareAuthorizeDDOperationCompleted);
            }
            this.InvokeAsync("PrepareAuthorizeDD", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        bankName,
                        hash}, this.PrepareAuthorizeDDOperationCompleted, userState);
        }
        
        private void OnPrepareAuthorizeDDOperationCompleted(object arg) {
            if ((this.PrepareAuthorizeDDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareAuthorizeDDCompleted(this, new PrepareAuthorizeDDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/SaleInvoice", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaleInvoice(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string hash) {
            object[] results = this.Invoke("SaleInvoice", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        invoiceText,
                        mediaDistribution,
                        customerId,
                        customerName,
                        customerPostNumber,
                        customerCity,
                        customerCountry,
                        customerSosialSecurityNumber,
                        customerPhoneNumber,
                        customerEmailAddress,
                        customerCOAddress,
                        customerStreetAddress,
                        productCode,
                        dueDateExceeded,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaleInvoiceAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string hash) {
            this.SaleInvoiceAsync(accountNumber, orderRef, userType, userRef, invoiceText, mediaDistribution, customerId, customerName, customerPostNumber, customerCity, customerCountry, customerSosialSecurityNumber, customerPhoneNumber, customerEmailAddress, customerCOAddress, customerStreetAddress, productCode, dueDateExceeded, hash, null);
        }
        
        /// <remarks/>
        public void SaleInvoiceAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string hash, 
                    object userState) {
            if ((this.SaleInvoiceOperationCompleted == null)) {
                this.SaleInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleInvoiceOperationCompleted);
            }
            this.InvokeAsync("SaleInvoice", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        invoiceText,
                        mediaDistribution,
                        customerId,
                        customerName,
                        customerPostNumber,
                        customerCity,
                        customerCountry,
                        customerSosialSecurityNumber,
                        customerPhoneNumber,
                        customerEmailAddress,
                        customerCOAddress,
                        customerStreetAddress,
                        productCode,
                        dueDateExceeded,
                        hash}, this.SaleInvoiceOperationCompleted, userState);
        }
        
        private void OnSaleInvoiceOperationCompleted(object arg) {
            if ((this.SaleInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleInvoiceCompleted(this, new SaleInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/SaleInvoice2", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaleInvoice2(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string creditcheckRef, 
                    string invoiceLayout, 
                    string hash) {
            object[] results = this.Invoke("SaleInvoice2", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        invoiceText,
                        mediaDistribution,
                        customerId,
                        customerName,
                        customerPostNumber,
                        customerCity,
                        customerCountry,
                        customerSosialSecurityNumber,
                        customerPhoneNumber,
                        customerEmailAddress,
                        customerCOAddress,
                        customerStreetAddress,
                        productCode,
                        dueDateExceeded,
                        creditcheckRef,
                        invoiceLayout,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaleInvoice2Async(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string creditcheckRef, 
                    string invoiceLayout, 
                    string hash) {
            this.SaleInvoice2Async(accountNumber, orderRef, userType, userRef, invoiceText, mediaDistribution, customerId, customerName, customerPostNumber, customerCity, customerCountry, customerSosialSecurityNumber, customerPhoneNumber, customerEmailAddress, customerCOAddress, customerStreetAddress, productCode, dueDateExceeded, creditcheckRef, invoiceLayout, hash, null);
        }
        
        /// <remarks/>
        public void SaleInvoice2Async(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string creditcheckRef, 
                    string invoiceLayout, 
                    string hash, 
                    object userState) {
            if ((this.SaleInvoice2OperationCompleted == null)) {
                this.SaleInvoice2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleInvoice2OperationCompleted);
            }
            this.InvokeAsync("SaleInvoice2", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        invoiceText,
                        mediaDistribution,
                        customerId,
                        customerName,
                        customerPostNumber,
                        customerCity,
                        customerCountry,
                        customerSosialSecurityNumber,
                        customerPhoneNumber,
                        customerEmailAddress,
                        customerCOAddress,
                        customerStreetAddress,
                        productCode,
                        dueDateExceeded,
                        creditcheckRef,
                        invoiceLayout,
                        hash}, this.SaleInvoice2OperationCompleted, userState);
        }
        
        private void OnSaleInvoice2OperationCompleted(object arg) {
            if ((this.SaleInvoice2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleInvoice2Completed(this, new SaleInvoice2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/SaleInvoiceLedger", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaleInvoiceLedger(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDate, 
                    string creditcheckRef, 
                    int invoiceNumber, 
                    string invoiceDate, 
                    string hash) {
            object[] results = this.Invoke("SaleInvoiceLedger", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        invoiceText,
                        mediaDistribution,
                        customerId,
                        customerName,
                        customerPostNumber,
                        customerCity,
                        customerCountry,
                        customerSosialSecurityNumber,
                        customerPhoneNumber,
                        customerEmailAddress,
                        customerCOAddress,
                        customerStreetAddress,
                        productCode,
                        dueDate,
                        creditcheckRef,
                        invoiceNumber,
                        invoiceDate,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaleInvoiceLedgerAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDate, 
                    string creditcheckRef, 
                    int invoiceNumber, 
                    string invoiceDate, 
                    string hash) {
            this.SaleInvoiceLedgerAsync(accountNumber, orderRef, userType, userRef, invoiceText, mediaDistribution, customerId, customerName, customerPostNumber, customerCity, customerCountry, customerSosialSecurityNumber, customerPhoneNumber, customerEmailAddress, customerCOAddress, customerStreetAddress, productCode, dueDate, creditcheckRef, invoiceNumber, invoiceDate, hash, null);
        }
        
        /// <remarks/>
        public void SaleInvoiceLedgerAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDate, 
                    string creditcheckRef, 
                    int invoiceNumber, 
                    string invoiceDate, 
                    string hash, 
                    object userState) {
            if ((this.SaleInvoiceLedgerOperationCompleted == null)) {
                this.SaleInvoiceLedgerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleInvoiceLedgerOperationCompleted);
            }
            this.InvokeAsync("SaleInvoiceLedger", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        invoiceText,
                        mediaDistribution,
                        customerId,
                        customerName,
                        customerPostNumber,
                        customerCity,
                        customerCountry,
                        customerSosialSecurityNumber,
                        customerPhoneNumber,
                        customerEmailAddress,
                        customerCOAddress,
                        customerStreetAddress,
                        productCode,
                        dueDate,
                        creditcheckRef,
                        invoiceNumber,
                        invoiceDate,
                        hash}, this.SaleInvoiceLedgerOperationCompleted, userState);
        }
        
        private void OnSaleInvoiceLedgerOperationCompleted(object arg) {
            if ((this.SaleInvoiceLedgerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleInvoiceLedgerCompleted(this, new SaleInvoiceLedgerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AddLoan", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddLoan(
                    long accountNumber, 
                    string orderRef, 
                    string socialSecurityNumber, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string address, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string phone1, 
                    string phone2, 
                    string gsm, 
                    string additionalProducs, 
                    string shippingDescription, 
                    string additionalInfo, 
                    int calculateType, 
                    string calculateRef, 
                    int nominalInterest, 
                    int pkiMethod, 
                    int model, 
                    string hash) {
            object[] results = this.Invoke("AddLoan", new object[] {
                        accountNumber,
                        orderRef,
                        socialSecurityNumber,
                        email,
                        firstName,
                        lastName,
                        address,
                        postalCode,
                        city,
                        country,
                        phone1,
                        phone2,
                        gsm,
                        additionalProducs,
                        shippingDescription,
                        additionalInfo,
                        calculateType,
                        calculateRef,
                        nominalInterest,
                        pkiMethod,
                        model,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddLoanAsync(
                    long accountNumber, 
                    string orderRef, 
                    string socialSecurityNumber, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string address, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string phone1, 
                    string phone2, 
                    string gsm, 
                    string additionalProducs, 
                    string shippingDescription, 
                    string additionalInfo, 
                    int calculateType, 
                    string calculateRef, 
                    int nominalInterest, 
                    int pkiMethod, 
                    int model, 
                    string hash) {
            this.AddLoanAsync(accountNumber, orderRef, socialSecurityNumber, email, firstName, lastName, address, postalCode, city, country, phone1, phone2, gsm, additionalProducs, shippingDescription, additionalInfo, calculateType, calculateRef, nominalInterest, pkiMethod, model, hash, null);
        }
        
        /// <remarks/>
        public void AddLoanAsync(
                    long accountNumber, 
                    string orderRef, 
                    string socialSecurityNumber, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string address, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string phone1, 
                    string phone2, 
                    string gsm, 
                    string additionalProducs, 
                    string shippingDescription, 
                    string additionalInfo, 
                    int calculateType, 
                    string calculateRef, 
                    int nominalInterest, 
                    int pkiMethod, 
                    int model, 
                    string hash, 
                    object userState) {
            if ((this.AddLoanOperationCompleted == null)) {
                this.AddLoanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLoanOperationCompleted);
            }
            this.InvokeAsync("AddLoan", new object[] {
                        accountNumber,
                        orderRef,
                        socialSecurityNumber,
                        email,
                        firstName,
                        lastName,
                        address,
                        postalCode,
                        city,
                        country,
                        phone1,
                        phone2,
                        gsm,
                        additionalProducs,
                        shippingDescription,
                        additionalInfo,
                        calculateType,
                        calculateRef,
                        nominalInterest,
                        pkiMethod,
                        model,
                        hash}, this.AddLoanOperationCompleted, userState);
        }
        
        private void OnAddLoanOperationCompleted(object arg) {
            if ((this.AddLoanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLoanCompleted(this, new AddLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/CalculateLoan", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CalculateLoan(long accountNumber, int numberOfMonths, int monthlyPayment, int amount, int loanType, string hash) {
            object[] results = this.Invoke("CalculateLoan", new object[] {
                        accountNumber,
                        numberOfMonths,
                        monthlyPayment,
                        amount,
                        loanType,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateLoanAsync(long accountNumber, int numberOfMonths, int monthlyPayment, int amount, int loanType, string hash) {
            this.CalculateLoanAsync(accountNumber, numberOfMonths, monthlyPayment, amount, loanType, hash, null);
        }
        
        /// <remarks/>
        public void CalculateLoanAsync(long accountNumber, int numberOfMonths, int monthlyPayment, int amount, int loanType, string hash, object userState) {
            if ((this.CalculateLoanOperationCompleted == null)) {
                this.CalculateLoanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateLoanOperationCompleted);
            }
            this.InvokeAsync("CalculateLoan", new object[] {
                        accountNumber,
                        numberOfMonths,
                        monthlyPayment,
                        amount,
                        loanType,
                        hash}, this.CalculateLoanOperationCompleted, userState);
        }
        
        private void OnCalculateLoanOperationCompleted(object arg) {
            if ((this.CalculateLoanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateLoanCompleted(this, new CalculateLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/SaleLoan", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaleLoan(long accountNumber, string orderRef, int userType, string userRef, string hash) {
            object[] results = this.Invoke("SaleLoan", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaleLoanAsync(long accountNumber, string orderRef, int userType, string userRef, string hash) {
            this.SaleLoanAsync(accountNumber, orderRef, userType, userRef, hash, null);
        }
        
        /// <remarks/>
        public void SaleLoanAsync(long accountNumber, string orderRef, int userType, string userRef, string hash, object userState) {
            if ((this.SaleLoanOperationCompleted == null)) {
                this.SaleLoanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleLoanOperationCompleted);
            }
            this.InvokeAsync("SaleLoan", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        hash}, this.SaleLoanOperationCompleted, userState);
        }
        
        private void OnSaleLoanOperationCompleted(object arg) {
            if ((this.SaleLoanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleLoanCompleted(this, new SaleLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AuthorizeLoan", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthorizeLoan(long accountNumber, string orderRef, int userType, string userRef, string hash) {
            object[] results = this.Invoke("AuthorizeLoan", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeLoanAsync(long accountNumber, string orderRef, int userType, string userRef, string hash) {
            this.AuthorizeLoanAsync(accountNumber, orderRef, userType, userRef, hash, null);
        }
        
        /// <remarks/>
        public void AuthorizeLoanAsync(long accountNumber, string orderRef, int userType, string userRef, string hash, object userState) {
            if ((this.AuthorizeLoanOperationCompleted == null)) {
                this.AuthorizeLoanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeLoanOperationCompleted);
            }
            this.InvokeAsync("AuthorizeLoan", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        hash}, this.AuthorizeLoanOperationCompleted, userState);
        }
        
        private void OnAuthorizeLoanOperationCompleted(object arg) {
            if ((this.AuthorizeLoanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeLoanCompleted(this, new AuthorizeLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AddOrderAddress", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddOrderAddress(
                    long accountNumber, 
                    string orderRef, 
                    string billingFirstName, 
                    string billingLastName, 
                    string billingAddress1, 
                    string billingAddress2, 
                    string billingAddress3, 
                    string billingPostNumber, 
                    string billingCity, 
                    string billingState, 
                    string billingCountry, 
                    string billingEmail, 
                    string billingPhone, 
                    string billingGsm, 
                    string deliveryFirstName, 
                    string deliveryLastName, 
                    string deliveryAddress1, 
                    string deliveryAddress2, 
                    string deliveryAddress3, 
                    string deliveryPostNumber, 
                    string deliveryCity, 
                    string deliveryState, 
                    string deliveryCountry, 
                    string deliveryEmail, 
                    string deliveryPhone, 
                    string deliveryGsm, 
                    string hash) {
            object[] results = this.Invoke("AddOrderAddress", new object[] {
                        accountNumber,
                        orderRef,
                        billingFirstName,
                        billingLastName,
                        billingAddress1,
                        billingAddress2,
                        billingAddress3,
                        billingPostNumber,
                        billingCity,
                        billingState,
                        billingCountry,
                        billingEmail,
                        billingPhone,
                        billingGsm,
                        deliveryFirstName,
                        deliveryLastName,
                        deliveryAddress1,
                        deliveryAddress2,
                        deliveryAddress3,
                        deliveryPostNumber,
                        deliveryCity,
                        deliveryState,
                        deliveryCountry,
                        deliveryEmail,
                        deliveryPhone,
                        deliveryGsm,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddOrderAddressAsync(
                    long accountNumber, 
                    string orderRef, 
                    string billingFirstName, 
                    string billingLastName, 
                    string billingAddress1, 
                    string billingAddress2, 
                    string billingAddress3, 
                    string billingPostNumber, 
                    string billingCity, 
                    string billingState, 
                    string billingCountry, 
                    string billingEmail, 
                    string billingPhone, 
                    string billingGsm, 
                    string deliveryFirstName, 
                    string deliveryLastName, 
                    string deliveryAddress1, 
                    string deliveryAddress2, 
                    string deliveryAddress3, 
                    string deliveryPostNumber, 
                    string deliveryCity, 
                    string deliveryState, 
                    string deliveryCountry, 
                    string deliveryEmail, 
                    string deliveryPhone, 
                    string deliveryGsm, 
                    string hash) {
            this.AddOrderAddressAsync(accountNumber, orderRef, billingFirstName, billingLastName, billingAddress1, billingAddress2, billingAddress3, billingPostNumber, billingCity, billingState, billingCountry, billingEmail, billingPhone, billingGsm, deliveryFirstName, deliveryLastName, deliveryAddress1, deliveryAddress2, deliveryAddress3, deliveryPostNumber, deliveryCity, deliveryState, deliveryCountry, deliveryEmail, deliveryPhone, deliveryGsm, hash, null);
        }
        
        /// <remarks/>
        public void AddOrderAddressAsync(
                    long accountNumber, 
                    string orderRef, 
                    string billingFirstName, 
                    string billingLastName, 
                    string billingAddress1, 
                    string billingAddress2, 
                    string billingAddress3, 
                    string billingPostNumber, 
                    string billingCity, 
                    string billingState, 
                    string billingCountry, 
                    string billingEmail, 
                    string billingPhone, 
                    string billingGsm, 
                    string deliveryFirstName, 
                    string deliveryLastName, 
                    string deliveryAddress1, 
                    string deliveryAddress2, 
                    string deliveryAddress3, 
                    string deliveryPostNumber, 
                    string deliveryCity, 
                    string deliveryState, 
                    string deliveryCountry, 
                    string deliveryEmail, 
                    string deliveryPhone, 
                    string deliveryGsm, 
                    string hash, 
                    object userState) {
            if ((this.AddOrderAddressOperationCompleted == null)) {
                this.AddOrderAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrderAddressOperationCompleted);
            }
            this.InvokeAsync("AddOrderAddress", new object[] {
                        accountNumber,
                        orderRef,
                        billingFirstName,
                        billingLastName,
                        billingAddress1,
                        billingAddress2,
                        billingAddress3,
                        billingPostNumber,
                        billingCity,
                        billingState,
                        billingCountry,
                        billingEmail,
                        billingPhone,
                        billingGsm,
                        deliveryFirstName,
                        deliveryLastName,
                        deliveryAddress1,
                        deliveryAddress2,
                        deliveryAddress3,
                        deliveryPostNumber,
                        deliveryCity,
                        deliveryState,
                        deliveryCountry,
                        deliveryEmail,
                        deliveryPhone,
                        deliveryGsm,
                        hash}, this.AddOrderAddressOperationCompleted, userState);
        }
        
        private void OnAddOrderAddressOperationCompleted(object arg) {
            if ((this.AddOrderAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrderAddressCompleted(this, new AddOrderAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AddOrderAddress2", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddOrderAddress2(
                    long accountNumber, 
                    string orderRef, 
                    string billingFirstName, 
                    string billingLastName, 
                    string billingAddress1, 
                    string billingAddress2, 
                    string billingAddress3, 
                    string billingPostNumber, 
                    string billingCity, 
                    string billingState, 
                    string billingCountry, 
                    string billingCountryCode, 
                    string billingEmail, 
                    string billingPhone, 
                    string billingGsm, 
                    string deliveryFirstName, 
                    string deliveryLastName, 
                    string deliveryAddress1, 
                    string deliveryAddress2, 
                    string deliveryAddress3, 
                    string deliveryPostNumber, 
                    string deliveryCity, 
                    string deliveryState, 
                    string deliveryCountry, 
                    string deliveryCountryCode, 
                    string deliveryEmail, 
                    string deliveryPhone, 
                    string deliveryGsm, 
                    string hash) {
            object[] results = this.Invoke("AddOrderAddress2", new object[] {
                        accountNumber,
                        orderRef,
                        billingFirstName,
                        billingLastName,
                        billingAddress1,
                        billingAddress2,
                        billingAddress3,
                        billingPostNumber,
                        billingCity,
                        billingState,
                        billingCountry,
                        billingCountryCode,
                        billingEmail,
                        billingPhone,
                        billingGsm,
                        deliveryFirstName,
                        deliveryLastName,
                        deliveryAddress1,
                        deliveryAddress2,
                        deliveryAddress3,
                        deliveryPostNumber,
                        deliveryCity,
                        deliveryState,
                        deliveryCountry,
                        deliveryCountryCode,
                        deliveryEmail,
                        deliveryPhone,
                        deliveryGsm,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddOrderAddress2Async(
                    long accountNumber, 
                    string orderRef, 
                    string billingFirstName, 
                    string billingLastName, 
                    string billingAddress1, 
                    string billingAddress2, 
                    string billingAddress3, 
                    string billingPostNumber, 
                    string billingCity, 
                    string billingState, 
                    string billingCountry, 
                    string billingCountryCode, 
                    string billingEmail, 
                    string billingPhone, 
                    string billingGsm, 
                    string deliveryFirstName, 
                    string deliveryLastName, 
                    string deliveryAddress1, 
                    string deliveryAddress2, 
                    string deliveryAddress3, 
                    string deliveryPostNumber, 
                    string deliveryCity, 
                    string deliveryState, 
                    string deliveryCountry, 
                    string deliveryCountryCode, 
                    string deliveryEmail, 
                    string deliveryPhone, 
                    string deliveryGsm, 
                    string hash) {
            this.AddOrderAddress2Async(accountNumber, orderRef, billingFirstName, billingLastName, billingAddress1, billingAddress2, billingAddress3, billingPostNumber, billingCity, billingState, billingCountry, billingCountryCode, billingEmail, billingPhone, billingGsm, deliveryFirstName, deliveryLastName, deliveryAddress1, deliveryAddress2, deliveryAddress3, deliveryPostNumber, deliveryCity, deliveryState, deliveryCountry, deliveryCountryCode, deliveryEmail, deliveryPhone, deliveryGsm, hash, null);
        }
        
        /// <remarks/>
        public void AddOrderAddress2Async(
                    long accountNumber, 
                    string orderRef, 
                    string billingFirstName, 
                    string billingLastName, 
                    string billingAddress1, 
                    string billingAddress2, 
                    string billingAddress3, 
                    string billingPostNumber, 
                    string billingCity, 
                    string billingState, 
                    string billingCountry, 
                    string billingCountryCode, 
                    string billingEmail, 
                    string billingPhone, 
                    string billingGsm, 
                    string deliveryFirstName, 
                    string deliveryLastName, 
                    string deliveryAddress1, 
                    string deliveryAddress2, 
                    string deliveryAddress3, 
                    string deliveryPostNumber, 
                    string deliveryCity, 
                    string deliveryState, 
                    string deliveryCountry, 
                    string deliveryCountryCode, 
                    string deliveryEmail, 
                    string deliveryPhone, 
                    string deliveryGsm, 
                    string hash, 
                    object userState) {
            if ((this.AddOrderAddress2OperationCompleted == null)) {
                this.AddOrderAddress2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrderAddress2OperationCompleted);
            }
            this.InvokeAsync("AddOrderAddress2", new object[] {
                        accountNumber,
                        orderRef,
                        billingFirstName,
                        billingLastName,
                        billingAddress1,
                        billingAddress2,
                        billingAddress3,
                        billingPostNumber,
                        billingCity,
                        billingState,
                        billingCountry,
                        billingCountryCode,
                        billingEmail,
                        billingPhone,
                        billingGsm,
                        deliveryFirstName,
                        deliveryLastName,
                        deliveryAddress1,
                        deliveryAddress2,
                        deliveryAddress3,
                        deliveryPostNumber,
                        deliveryCity,
                        deliveryState,
                        deliveryCountry,
                        deliveryCountryCode,
                        deliveryEmail,
                        deliveryPhone,
                        deliveryGsm,
                        hash}, this.AddOrderAddress2OperationCompleted, userState);
        }
        
        private void OnAddOrderAddress2OperationCompleted(object arg) {
            if ((this.AddOrderAddress2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrderAddress2Completed(this, new AddOrderAddress2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AuthorizeGC", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthorizeGC(long accountNumber, string orderRef, int userType, string userRef, string pan, string expireMonth, string expireYear, string cvc, string hash) {
            object[] results = this.Invoke("AuthorizeGC", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        pan,
                        expireMonth,
                        expireYear,
                        cvc,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeGCAsync(long accountNumber, string orderRef, int userType, string userRef, string pan, string expireMonth, string expireYear, string cvc, string hash) {
            this.AuthorizeGCAsync(accountNumber, orderRef, userType, userRef, pan, expireMonth, expireYear, cvc, hash, null);
        }
        
        /// <remarks/>
        public void AuthorizeGCAsync(long accountNumber, string orderRef, int userType, string userRef, string pan, string expireMonth, string expireYear, string cvc, string hash, object userState) {
            if ((this.AuthorizeGCOperationCompleted == null)) {
                this.AuthorizeGCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeGCOperationCompleted);
            }
            this.InvokeAsync("AuthorizeGC", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        pan,
                        expireMonth,
                        expireYear,
                        cvc,
                        hash}, this.AuthorizeGCOperationCompleted, userState);
        }
        
        private void OnAuthorizeGCOperationCompleted(object arg) {
            if ((this.AuthorizeGCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeGCCompleted(this, new AuthorizeGCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/SaleGC", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaleGC(long accountNumber, string orderRef, int userType, string userRef, string pan, string expireMonth, string expireYear, string cvc, string hash) {
            object[] results = this.Invoke("SaleGC", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        pan,
                        expireMonth,
                        expireYear,
                        cvc,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaleGCAsync(long accountNumber, string orderRef, int userType, string userRef, string pan, string expireMonth, string expireYear, string cvc, string hash) {
            this.SaleGCAsync(accountNumber, orderRef, userType, userRef, pan, expireMonth, expireYear, cvc, hash, null);
        }
        
        /// <remarks/>
        public void SaleGCAsync(long accountNumber, string orderRef, int userType, string userRef, string pan, string expireMonth, string expireYear, string cvc, string hash, object userState) {
            if ((this.SaleGCOperationCompleted == null)) {
                this.SaleGCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleGCOperationCompleted);
            }
            this.InvokeAsync("SaleGC", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        pan,
                        expireMonth,
                        expireYear,
                        cvc,
                        hash}, this.SaleGCOperationCompleted, userState);
        }
        
        private void OnSaleGCOperationCompleted(object arg) {
            if ((this.SaleGCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleGCCompleted(this, new SaleGCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/GetTransactionDetails2", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTransactionDetails2(long accountNumber, int transactionNumber, string hash) {
            object[] results = this.Invoke("GetTransactionDetails2", new object[] {
                        accountNumber,
                        transactionNumber,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionDetails2Async(long accountNumber, int transactionNumber, string hash) {
            this.GetTransactionDetails2Async(accountNumber, transactionNumber, hash, null);
        }
        
        /// <remarks/>
        public void GetTransactionDetails2Async(long accountNumber, int transactionNumber, string hash, object userState) {
            if ((this.GetTransactionDetails2OperationCompleted == null)) {
                this.GetTransactionDetails2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionDetails2OperationCompleted);
            }
            this.InvokeAsync("GetTransactionDetails2", new object[] {
                        accountNumber,
                        transactionNumber,
                        hash}, this.GetTransactionDetails2OperationCompleted, userState);
        }
        
        private void OnGetTransactionDetails2OperationCompleted(object arg) {
            if ((this.GetTransactionDetails2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionDetails2Completed(this, new GetTransactionDetails2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/GetTransactionDetails", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTransactionDetails(long accountNumber, string transactionRef, string hash) {
            object[] results = this.Invoke("GetTransactionDetails", new object[] {
                        accountNumber,
                        transactionRef,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionDetailsAsync(long accountNumber, string transactionRef, string hash) {
            this.GetTransactionDetailsAsync(accountNumber, transactionRef, hash, null);
        }
        
        /// <remarks/>
        public void GetTransactionDetailsAsync(long accountNumber, string transactionRef, string hash, object userState) {
            if ((this.GetTransactionDetailsOperationCompleted == null)) {
                this.GetTransactionDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionDetailsOperationCompleted);
            }
            this.InvokeAsync("GetTransactionDetails", new object[] {
                        accountNumber,
                        transactionRef,
                        hash}, this.GetTransactionDetailsOperationCompleted, userState);
        }
        
        private void OnGetTransactionDetailsOperationCompleted(object arg) {
            if ((this.GetTransactionDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionDetailsCompleted(this, new GetTransactionDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/TransactionCheck2", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransactionCheck2(long accountNumber, int transactionNumber, string hash) {
            object[] results = this.Invoke("TransactionCheck2", new object[] {
                        accountNumber,
                        transactionNumber,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TransactionCheck2Async(long accountNumber, int transactionNumber, string hash) {
            this.TransactionCheck2Async(accountNumber, transactionNumber, hash, null);
        }
        
        /// <remarks/>
        public void TransactionCheck2Async(long accountNumber, int transactionNumber, string hash, object userState) {
            if ((this.TransactionCheck2OperationCompleted == null)) {
                this.TransactionCheck2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransactionCheck2OperationCompleted);
            }
            this.InvokeAsync("TransactionCheck2", new object[] {
                        accountNumber,
                        transactionNumber,
                        hash}, this.TransactionCheck2OperationCompleted, userState);
        }
        
        private void OnTransactionCheck2OperationCompleted(object arg) {
            if ((this.TransactionCheck2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransactionCheck2Completed(this, new TransactionCheck2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AuthorizeInvoice", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthorizeInvoice(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string creditcheckRef, 
                    string invoiceLayout, 
                    string hash) {
            object[] results = this.Invoke("AuthorizeInvoice", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        invoiceText,
                        mediaDistribution,
                        customerId,
                        customerName,
                        customerPostNumber,
                        customerCity,
                        customerCountry,
                        customerSosialSecurityNumber,
                        customerPhoneNumber,
                        customerEmailAddress,
                        customerCOAddress,
                        customerStreetAddress,
                        productCode,
                        dueDateExceeded,
                        creditcheckRef,
                        invoiceLayout,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeInvoiceAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string creditcheckRef, 
                    string invoiceLayout, 
                    string hash) {
            this.AuthorizeInvoiceAsync(accountNumber, orderRef, userType, userRef, invoiceText, mediaDistribution, customerId, customerName, customerPostNumber, customerCity, customerCountry, customerSosialSecurityNumber, customerPhoneNumber, customerEmailAddress, customerCOAddress, customerStreetAddress, productCode, dueDateExceeded, creditcheckRef, invoiceLayout, hash, null);
        }
        
        /// <remarks/>
        public void AuthorizeInvoiceAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string creditcheckRef, 
                    string invoiceLayout, 
                    string hash, 
                    object userState) {
            if ((this.AuthorizeInvoiceOperationCompleted == null)) {
                this.AuthorizeInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeInvoiceOperationCompleted);
            }
            this.InvokeAsync("AuthorizeInvoice", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        invoiceText,
                        mediaDistribution,
                        customerId,
                        customerName,
                        customerPostNumber,
                        customerCity,
                        customerCountry,
                        customerSosialSecurityNumber,
                        customerPhoneNumber,
                        customerEmailAddress,
                        customerCOAddress,
                        customerStreetAddress,
                        productCode,
                        dueDateExceeded,
                        creditcheckRef,
                        invoiceLayout,
                        hash}, this.AuthorizeInvoiceOperationCompleted, userState);
        }
        
        private void OnAuthorizeInvoiceOperationCompleted(object arg) {
            if ((this.AuthorizeInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeInvoiceCompleted(this, new AuthorizeInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/AuthorizeInvoiceLedger", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthorizeInvoiceLedger(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDate, 
                    string creditcheckRef, 
                    int invoiceNumber, 
                    string invoiceDate, 
                    string hash) {
            object[] results = this.Invoke("AuthorizeInvoiceLedger", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        invoiceText,
                        mediaDistribution,
                        customerId,
                        customerName,
                        customerPostNumber,
                        customerCity,
                        customerCountry,
                        customerSosialSecurityNumber,
                        customerPhoneNumber,
                        customerEmailAddress,
                        customerCOAddress,
                        customerStreetAddress,
                        productCode,
                        dueDate,
                        creditcheckRef,
                        invoiceNumber,
                        invoiceDate,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeInvoiceLedgerAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDate, 
                    string creditcheckRef, 
                    int invoiceNumber, 
                    string invoiceDate, 
                    string hash) {
            this.AuthorizeInvoiceLedgerAsync(accountNumber, orderRef, userType, userRef, invoiceText, mediaDistribution, customerId, customerName, customerPostNumber, customerCity, customerCountry, customerSosialSecurityNumber, customerPhoneNumber, customerEmailAddress, customerCOAddress, customerStreetAddress, productCode, dueDate, creditcheckRef, invoiceNumber, invoiceDate, hash, null);
        }
        
        /// <remarks/>
        public void AuthorizeInvoiceLedgerAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDate, 
                    string creditcheckRef, 
                    int invoiceNumber, 
                    string invoiceDate, 
                    string hash, 
                    object userState) {
            if ((this.AuthorizeInvoiceLedgerOperationCompleted == null)) {
                this.AuthorizeInvoiceLedgerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeInvoiceLedgerOperationCompleted);
            }
            this.InvokeAsync("AuthorizeInvoiceLedger", new object[] {
                        accountNumber,
                        orderRef,
                        userType,
                        userRef,
                        invoiceText,
                        mediaDistribution,
                        customerId,
                        customerName,
                        customerPostNumber,
                        customerCity,
                        customerCountry,
                        customerSosialSecurityNumber,
                        customerPhoneNumber,
                        customerEmailAddress,
                        customerCOAddress,
                        customerStreetAddress,
                        productCode,
                        dueDate,
                        creditcheckRef,
                        invoiceNumber,
                        invoiceDate,
                        hash}, this.AuthorizeInvoiceLedgerOperationCompleted, userState);
        }
        
        private void OnAuthorizeInvoiceLedgerOperationCompleted(object arg) {
            if ((this.AuthorizeInvoiceLedgerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeInvoiceLedgerCompleted(this, new AuthorizeInvoiceLedgerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/PurchaseInvoicePrivate", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PurchaseInvoicePrivate(
                    long accountNumber, 
                    string orderRef, 
                    string customerRef, 
                    string customerName, 
                    string streetAddress, 
                    string coAddress, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string socialSecurityNumber, 
                    string phoneNumber, 
                    string email, 
                    string productCode, 
                    string creditcheckRef, 
                    int mediaDistribution, 
                    string invoiceText, 
                    string invoiceDate, 
                    short invoiceDueDays, 
                    int invoiceNumber, 
                    string invoiceLayout, 
                    string hash) {
            object[] results = this.Invoke("PurchaseInvoicePrivate", new object[] {
                        accountNumber,
                        orderRef,
                        customerRef,
                        customerName,
                        streetAddress,
                        coAddress,
                        postalCode,
                        city,
                        country,
                        socialSecurityNumber,
                        phoneNumber,
                        email,
                        productCode,
                        creditcheckRef,
                        mediaDistribution,
                        invoiceText,
                        invoiceDate,
                        invoiceDueDays,
                        invoiceNumber,
                        invoiceLayout,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseInvoicePrivateAsync(
                    long accountNumber, 
                    string orderRef, 
                    string customerRef, 
                    string customerName, 
                    string streetAddress, 
                    string coAddress, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string socialSecurityNumber, 
                    string phoneNumber, 
                    string email, 
                    string productCode, 
                    string creditcheckRef, 
                    int mediaDistribution, 
                    string invoiceText, 
                    string invoiceDate, 
                    short invoiceDueDays, 
                    int invoiceNumber, 
                    string invoiceLayout, 
                    string hash) {
            this.PurchaseInvoicePrivateAsync(accountNumber, orderRef, customerRef, customerName, streetAddress, coAddress, postalCode, city, country, socialSecurityNumber, phoneNumber, email, productCode, creditcheckRef, mediaDistribution, invoiceText, invoiceDate, invoiceDueDays, invoiceNumber, invoiceLayout, hash, null);
        }
        
        /// <remarks/>
        public void PurchaseInvoicePrivateAsync(
                    long accountNumber, 
                    string orderRef, 
                    string customerRef, 
                    string customerName, 
                    string streetAddress, 
                    string coAddress, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string socialSecurityNumber, 
                    string phoneNumber, 
                    string email, 
                    string productCode, 
                    string creditcheckRef, 
                    int mediaDistribution, 
                    string invoiceText, 
                    string invoiceDate, 
                    short invoiceDueDays, 
                    int invoiceNumber, 
                    string invoiceLayout, 
                    string hash, 
                    object userState) {
            if ((this.PurchaseInvoicePrivateOperationCompleted == null)) {
                this.PurchaseInvoicePrivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseInvoicePrivateOperationCompleted);
            }
            this.InvokeAsync("PurchaseInvoicePrivate", new object[] {
                        accountNumber,
                        orderRef,
                        customerRef,
                        customerName,
                        streetAddress,
                        coAddress,
                        postalCode,
                        city,
                        country,
                        socialSecurityNumber,
                        phoneNumber,
                        email,
                        productCode,
                        creditcheckRef,
                        mediaDistribution,
                        invoiceText,
                        invoiceDate,
                        invoiceDueDays,
                        invoiceNumber,
                        invoiceLayout,
                        hash}, this.PurchaseInvoicePrivateOperationCompleted, userState);
        }
        
        private void OnPurchaseInvoicePrivateOperationCompleted(object arg) {
            if ((this.PurchaseInvoicePrivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseInvoicePrivateCompleted(this, new PurchaseInvoicePrivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://external.payex.com/PxOrder/PurchaseInvoiceCorporate", RequestNamespace="http://external.payex.com/PxOrder/", ResponseNamespace="http://external.payex.com/PxOrder/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PurchaseInvoiceCorporate(
                    long accountNumber, 
                    string orderRef, 
                    string companyRef, 
                    string companyName, 
                    string streetAddress, 
                    string coAddress, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string organizationNumber, 
                    string phoneNumber, 
                    string email, 
                    string productCode, 
                    string creditcheckRef, 
                    int mediaDistribution, 
                    string invoiceText, 
                    string invoiceDate, 
                    short invoiceDueDays, 
                    int invoiceNumber, 
                    string invoiceLayout, 
                    string hash) {
            object[] results = this.Invoke("PurchaseInvoiceCorporate", new object[] {
                        accountNumber,
                        orderRef,
                        companyRef,
                        companyName,
                        streetAddress,
                        coAddress,
                        postalCode,
                        city,
                        country,
                        organizationNumber,
                        phoneNumber,
                        email,
                        productCode,
                        creditcheckRef,
                        mediaDistribution,
                        invoiceText,
                        invoiceDate,
                        invoiceDueDays,
                        invoiceNumber,
                        invoiceLayout,
                        hash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseInvoiceCorporateAsync(
                    long accountNumber, 
                    string orderRef, 
                    string companyRef, 
                    string companyName, 
                    string streetAddress, 
                    string coAddress, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string organizationNumber, 
                    string phoneNumber, 
                    string email, 
                    string productCode, 
                    string creditcheckRef, 
                    int mediaDistribution, 
                    string invoiceText, 
                    string invoiceDate, 
                    short invoiceDueDays, 
                    int invoiceNumber, 
                    string invoiceLayout, 
                    string hash) {
            this.PurchaseInvoiceCorporateAsync(accountNumber, orderRef, companyRef, companyName, streetAddress, coAddress, postalCode, city, country, organizationNumber, phoneNumber, email, productCode, creditcheckRef, mediaDistribution, invoiceText, invoiceDate, invoiceDueDays, invoiceNumber, invoiceLayout, hash, null);
        }
        
        /// <remarks/>
        public void PurchaseInvoiceCorporateAsync(
                    long accountNumber, 
                    string orderRef, 
                    string companyRef, 
                    string companyName, 
                    string streetAddress, 
                    string coAddress, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string organizationNumber, 
                    string phoneNumber, 
                    string email, 
                    string productCode, 
                    string creditcheckRef, 
                    int mediaDistribution, 
                    string invoiceText, 
                    string invoiceDate, 
                    short invoiceDueDays, 
                    int invoiceNumber, 
                    string invoiceLayout, 
                    string hash, 
                    object userState) {
            if ((this.PurchaseInvoiceCorporateOperationCompleted == null)) {
                this.PurchaseInvoiceCorporateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseInvoiceCorporateOperationCompleted);
            }
            this.InvokeAsync("PurchaseInvoiceCorporate", new object[] {
                        accountNumber,
                        orderRef,
                        companyRef,
                        companyName,
                        streetAddress,
                        coAddress,
                        postalCode,
                        city,
                        country,
                        organizationNumber,
                        phoneNumber,
                        email,
                        productCode,
                        creditcheckRef,
                        mediaDistribution,
                        invoiceText,
                        invoiceDate,
                        invoiceDueDays,
                        invoiceNumber,
                        invoiceLayout,
                        hash}, this.PurchaseInvoiceCorporateOperationCompleted, userState);
        }
        
        private void OnPurchaseInvoiceCorporateOperationCompleted(object arg) {
            if ((this.PurchaseInvoiceCorporateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseInvoiceCorporateCompleted(this, new PurchaseInvoiceCorporateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public void CancelAsync1(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Initialize7CompletedEventHandler(object sender, Initialize7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Initialize7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Initialize7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InitializeCompletedEventHandler(object sender, InitializeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitializeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitializeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Initialize3CompletedEventHandler(object sender, Initialize3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Initialize3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Initialize3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Initialize4CompletedEventHandler(object sender, Initialize4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Initialize4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Initialize4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Initialize5CompletedEventHandler(object sender, Initialize5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Initialize5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Initialize5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Initialize6CompletedEventHandler(object sender, Initialize6CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Initialize6CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Initialize6CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Initialize1CompletedEventHandler(object sender, Initialize1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Initialize1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Initialize1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InitializeBasicCompletedEventHandler(object sender, InitializeBasicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitializeBasicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitializeBasicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CompleteCompletedEventHandler(object sender, CompleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Check2CompletedEventHandler(object sender, Check2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Check2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Check2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckCompletedEventHandler(object sender, CheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SalePXCompletedEventHandler(object sender, SalePXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SalePXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SalePXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizePXCompletedEventHandler(object sender, AuthorizePXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizePXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizePXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchasePXCompletedEventHandler(object sender, PurchasePXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchasePXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchasePXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchaseActivateCompletedEventHandler(object sender, PurchaseActivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchaseCACompletedEventHandler(object sender, PurchaseCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchaseOTTCompletedEventHandler(object sender, PurchaseOTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseOTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseOTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaleCPACompletedEventHandler(object sender, SaleCPACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleCPACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleCPACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaleCACompletedEventHandler(object sender, SaleCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizeCACompletedEventHandler(object sender, AuthorizeCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReserveIVRCompletedEventHandler(object sender, ReserveIVRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReserveIVRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReserveIVRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaleIVRCompletedEventHandler(object sender, SaleIVRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleIVRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleIVRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Cancel2CompletedEventHandler(object sender, Cancel2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Cancel2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Cancel2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelCompletedEventHandler(object sender, CancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Credit2CompletedEventHandler(object sender, Credit2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Credit2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Credit2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Credit3CompletedEventHandler(object sender, Credit3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Credit3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Credit3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Credit4CompletedEventHandler(object sender, Credit4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Credit4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Credit4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreditCompletedEventHandler(object sender, CreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreditOrderLine2CompletedEventHandler(object sender, CreditOrderLine2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditOrderLine2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditOrderLine2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreditOrderLine3CompletedEventHandler(object sender, CreditOrderLine3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditOrderLine3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditOrderLine3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreditOrderLineCompletedEventHandler(object sender, CreditOrderLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditOrderLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditOrderLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CaptureCompletedEventHandler(object sender, CaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Capture2CompletedEventHandler(object sender, Capture2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Capture2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Capture2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Capture3CompletedEventHandler(object sender, Capture3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Capture3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Capture3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Capture4CompletedEventHandler(object sender, Capture4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Capture4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Capture4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaleEVCCompletedEventHandler(object sender, SaleEVCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleEVCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleEVCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizeEVCCompletedEventHandler(object sender, AuthorizeEVCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeEVCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeEVCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddSingleOrderLineCompletedEventHandler(object sender, AddSingleOrderLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSingleOrderLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSingleOrderLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddMultipleOrderLinesCompletedEventHandler(object sender, AddMultipleOrderLinesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMultipleOrderLinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMultipleOrderLinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PrepareSaleDDCompletedEventHandler(object sender, PrepareSaleDDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareSaleDDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareSaleDDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PrepareSaleDD2CompletedEventHandler(object sender, PrepareSaleDD2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareSaleDD2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareSaleDD2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PrepareAuthorizeDDCompletedEventHandler(object sender, PrepareAuthorizeDDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareAuthorizeDDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareAuthorizeDDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaleInvoiceCompletedEventHandler(object sender, SaleInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaleInvoice2CompletedEventHandler(object sender, SaleInvoice2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleInvoice2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleInvoice2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaleInvoiceLedgerCompletedEventHandler(object sender, SaleInvoiceLedgerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleInvoiceLedgerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleInvoiceLedgerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddLoanCompletedEventHandler(object sender, AddLoanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLoanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLoanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CalculateLoanCompletedEventHandler(object sender, CalculateLoanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateLoanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateLoanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaleLoanCompletedEventHandler(object sender, SaleLoanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleLoanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleLoanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizeLoanCompletedEventHandler(object sender, AuthorizeLoanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeLoanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeLoanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddOrderAddressCompletedEventHandler(object sender, AddOrderAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrderAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrderAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddOrderAddress2CompletedEventHandler(object sender, AddOrderAddress2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrderAddress2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrderAddress2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizeGCCompletedEventHandler(object sender, AuthorizeGCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeGCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeGCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaleGCCompletedEventHandler(object sender, SaleGCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleGCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleGCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTransactionDetails2CompletedEventHandler(object sender, GetTransactionDetails2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionDetails2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionDetails2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTransactionDetailsCompletedEventHandler(object sender, GetTransactionDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TransactionCheck2CompletedEventHandler(object sender, TransactionCheck2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransactionCheck2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransactionCheck2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizeInvoiceCompletedEventHandler(object sender, AuthorizeInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizeInvoiceLedgerCompletedEventHandler(object sender, AuthorizeInvoiceLedgerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeInvoiceLedgerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeInvoiceLedgerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchaseInvoicePrivateCompletedEventHandler(object sender, PurchaseInvoicePrivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseInvoicePrivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseInvoicePrivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchaseInvoiceCorporateCompletedEventHandler(object sender, PurchaseInvoiceCorporateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseInvoiceCorporateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseInvoiceCorporateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591