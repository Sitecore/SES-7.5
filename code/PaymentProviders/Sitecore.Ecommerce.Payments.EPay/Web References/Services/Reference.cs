//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Sitecore.Ecommerce.Payments.EPay.Services {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PaymentSoap", Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment")]
    public partial class Payment : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getPbsErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEpayErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback captureOperationCompleted;
        
        private System.Threading.SendOrPostCallback move_as_capturedOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback creditOperationCompleted;
        
        private System.Threading.SendOrPostCallback getcardtypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback gettransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback gettransactionlistOperationCompleted;
        
        private System.Threading.SendOrPostCallback getcardinfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback renewOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Payment() {
            this.Url = global::Sitecore.Ecommerce.Payments.EPay.Properties.Settings.Default.Sitecore_Ecommerce_Payments_EPay_Payment_Payment;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getPbsErrorCompletedEventHandler getPbsErrorCompleted;
        
        /// <remarks/>
        public event getEpayErrorCompletedEventHandler getEpayErrorCompleted;
        
        /// <remarks/>
        public event captureCompletedEventHandler captureCompleted;
        
        /// <remarks/>
        public event move_as_capturedCompletedEventHandler move_as_capturedCompleted;
        
        /// <remarks/>
        public event deleteCompletedEventHandler deleteCompleted;
        
        /// <remarks/>
        public event creditCompletedEventHandler creditCompleted;
        
        /// <remarks/>
        public event getcardtypeCompletedEventHandler getcardtypeCompleted;
        
        /// <remarks/>
        public event gettransactionCompletedEventHandler gettransactionCompleted;
        
        /// <remarks/>
        public event gettransactionlistCompletedEventHandler gettransactionlistCompleted;
        
        /// <remarks/>
        public event getcardinfoCompletedEventHandler getcardinfoCompleted;
        
        /// <remarks/>
        public event renewCompletedEventHandler renewCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/payment/getPbsError", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getPbsError(int merchantnumber, int language, int pbsresponsecode, string pwd, ref string pbsresponsestring, ref int epayresponse) {
            object[] results = this.Invoke("getPbsError", new object[] {
                        merchantnumber,
                        language,
                        pbsresponsecode,
                        pwd,
                        pbsresponsestring,
                        epayresponse});
            pbsresponsestring = ((string)(results[1]));
            epayresponse = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getPbsErrorAsync(int merchantnumber, int language, int pbsresponsecode, string pwd, string pbsresponsestring, int epayresponse) {
            this.getPbsErrorAsync(merchantnumber, language, pbsresponsecode, pwd, pbsresponsestring, epayresponse, null);
        }
        
        /// <remarks/>
        public void getPbsErrorAsync(int merchantnumber, int language, int pbsresponsecode, string pwd, string pbsresponsestring, int epayresponse, object userState) {
            if ((this.getPbsErrorOperationCompleted == null)) {
                this.getPbsErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPbsErrorOperationCompleted);
            }
            this.InvokeAsync("getPbsError", new object[] {
                        merchantnumber,
                        language,
                        pbsresponsecode,
                        pwd,
                        pbsresponsestring,
                        epayresponse}, this.getPbsErrorOperationCompleted, userState);
        }
        
        private void OngetPbsErrorOperationCompleted(object arg) {
            if ((this.getPbsErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPbsErrorCompleted(this, new getPbsErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/payment/getEpayError", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getEpayError(int merchantnumber, int language, int epayresponsecode, string pwd, ref string epayresponsestring, ref int epayresponse) {
            object[] results = this.Invoke("getEpayError", new object[] {
                        merchantnumber,
                        language,
                        epayresponsecode,
                        pwd,
                        epayresponsestring,
                        epayresponse});
            epayresponsestring = ((string)(results[1]));
            epayresponse = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getEpayErrorAsync(int merchantnumber, int language, int epayresponsecode, string pwd, string epayresponsestring, int epayresponse) {
            this.getEpayErrorAsync(merchantnumber, language, epayresponsecode, pwd, epayresponsestring, epayresponse, null);
        }
        
        /// <remarks/>
        public void getEpayErrorAsync(int merchantnumber, int language, int epayresponsecode, string pwd, string epayresponsestring, int epayresponse, object userState) {
            if ((this.getEpayErrorOperationCompleted == null)) {
                this.getEpayErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEpayErrorOperationCompleted);
            }
            this.InvokeAsync("getEpayError", new object[] {
                        merchantnumber,
                        language,
                        epayresponsecode,
                        pwd,
                        epayresponsestring,
                        epayresponse}, this.getEpayErrorOperationCompleted, userState);
        }
        
        private void OngetEpayErrorOperationCompleted(object arg) {
            if ((this.getEpayErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEpayErrorCompleted(this, new getEpayErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/payment/capture", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool capture(int merchantnumber, long transactionid, int amount, string group, string pwd, ref int pbsResponse, ref int epayresponse) {
            object[] results = this.Invoke("capture", new object[] {
                        merchantnumber,
                        transactionid,
                        amount,
                        group,
                        pwd,
                        pbsResponse,
                        epayresponse});
            pbsResponse = ((int)(results[1]));
            epayresponse = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void captureAsync(int merchantnumber, long transactionid, int amount, string group, string pwd, int pbsResponse, int epayresponse) {
            this.captureAsync(merchantnumber, transactionid, amount, group, pwd, pbsResponse, epayresponse, null);
        }
        
        /// <remarks/>
        public void captureAsync(int merchantnumber, long transactionid, int amount, string group, string pwd, int pbsResponse, int epayresponse, object userState) {
            if ((this.captureOperationCompleted == null)) {
                this.captureOperationCompleted = new System.Threading.SendOrPostCallback(this.OncaptureOperationCompleted);
            }
            this.InvokeAsync("capture", new object[] {
                        merchantnumber,
                        transactionid,
                        amount,
                        group,
                        pwd,
                        pbsResponse,
                        epayresponse}, this.captureOperationCompleted, userState);
        }
        
        private void OncaptureOperationCompleted(object arg) {
            if ((this.captureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.captureCompleted(this, new captureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/payment/move_as_captured", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool move_as_captured(int merchantnumber, long transactionid, string group, string pwd, ref int epayresponse) {
            object[] results = this.Invoke("move_as_captured", new object[] {
                        merchantnumber,
                        transactionid,
                        group,
                        pwd,
                        epayresponse});
            epayresponse = ((int)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void move_as_capturedAsync(int merchantnumber, long transactionid, string group, string pwd, int epayresponse) {
            this.move_as_capturedAsync(merchantnumber, transactionid, group, pwd, epayresponse, null);
        }
        
        /// <remarks/>
        public void move_as_capturedAsync(int merchantnumber, long transactionid, string group, string pwd, int epayresponse, object userState) {
            if ((this.move_as_capturedOperationCompleted == null)) {
                this.move_as_capturedOperationCompleted = new System.Threading.SendOrPostCallback(this.Onmove_as_capturedOperationCompleted);
            }
            this.InvokeAsync("move_as_captured", new object[] {
                        merchantnumber,
                        transactionid,
                        group,
                        pwd,
                        epayresponse}, this.move_as_capturedOperationCompleted, userState);
        }
        
        private void Onmove_as_capturedOperationCompleted(object arg) {
            if ((this.move_as_capturedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.move_as_capturedCompleted(this, new move_as_capturedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/payment/delete", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool delete(int merchantnumber, long transactionid, string group, string pwd, ref int epayresponse) {
            object[] results = this.Invoke("delete", new object[] {
                        merchantnumber,
                        transactionid,
                        group,
                        pwd,
                        epayresponse});
            epayresponse = ((int)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deleteAsync(int merchantnumber, long transactionid, string group, string pwd, int epayresponse) {
            this.deleteAsync(merchantnumber, transactionid, group, pwd, epayresponse, null);
        }
        
        /// <remarks/>
        public void deleteAsync(int merchantnumber, long transactionid, string group, string pwd, int epayresponse, object userState) {
            if ((this.deleteOperationCompleted == null)) {
                this.deleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteOperationCompleted);
            }
            this.InvokeAsync("delete", new object[] {
                        merchantnumber,
                        transactionid,
                        group,
                        pwd,
                        epayresponse}, this.deleteOperationCompleted, userState);
        }
        
        private void OndeleteOperationCompleted(object arg) {
            if ((this.deleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCompleted(this, new deleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/payment/credit", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool credit(int merchantnumber, long transactionid, int amount, string group, string pwd, ref int pbsresponse, ref int epayresponse) {
            object[] results = this.Invoke("credit", new object[] {
                        merchantnumber,
                        transactionid,
                        amount,
                        group,
                        pwd,
                        pbsresponse,
                        epayresponse});
            pbsresponse = ((int)(results[1]));
            epayresponse = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void creditAsync(int merchantnumber, long transactionid, int amount, string group, string pwd, int pbsresponse, int epayresponse) {
            this.creditAsync(merchantnumber, transactionid, amount, group, pwd, pbsresponse, epayresponse, null);
        }
        
        /// <remarks/>
        public void creditAsync(int merchantnumber, long transactionid, int amount, string group, string pwd, int pbsresponse, int epayresponse, object userState) {
            if ((this.creditOperationCompleted == null)) {
                this.creditOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreditOperationCompleted);
            }
            this.InvokeAsync("credit", new object[] {
                        merchantnumber,
                        transactionid,
                        amount,
                        group,
                        pwd,
                        pbsresponse,
                        epayresponse}, this.creditOperationCompleted, userState);
        }
        
        private void OncreditOperationCompleted(object arg) {
            if ((this.creditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.creditCompleted(this, new creditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/payment/getcardtype", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getcardtype(int merchantnumber, string cardnumber, ref int cardtypeid, ref string cardname, ref int epayresponse) {
            object[] results = this.Invoke("getcardtype", new object[] {
                        merchantnumber,
                        cardnumber,
                        cardtypeid,
                        cardname,
                        epayresponse});
            cardtypeid = ((int)(results[1]));
            cardname = ((string)(results[2]));
            epayresponse = ((int)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getcardtypeAsync(int merchantnumber, string cardnumber, int cardtypeid, string cardname, int epayresponse) {
            this.getcardtypeAsync(merchantnumber, cardnumber, cardtypeid, cardname, epayresponse, null);
        }
        
        /// <remarks/>
        public void getcardtypeAsync(int merchantnumber, string cardnumber, int cardtypeid, string cardname, int epayresponse, object userState) {
            if ((this.getcardtypeOperationCompleted == null)) {
                this.getcardtypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetcardtypeOperationCompleted);
            }
            this.InvokeAsync("getcardtype", new object[] {
                        merchantnumber,
                        cardnumber,
                        cardtypeid,
                        cardname,
                        epayresponse}, this.getcardtypeOperationCompleted, userState);
        }
        
        private void OngetcardtypeOperationCompleted(object arg) {
            if ((this.getcardtypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getcardtypeCompleted(this, new getcardtypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/payment/gettransaction", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool gettransaction(int merchantnumber, long transactionid, string pwd, ref TransactionInformationType transactionInformation, ref int epayresponse) {
            object[] results = this.Invoke("gettransaction", new object[] {
                        merchantnumber,
                        transactionid,
                        pwd,
                        transactionInformation,
                        epayresponse});
            transactionInformation = ((TransactionInformationType)(results[1]));
            epayresponse = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void gettransactionAsync(int merchantnumber, long transactionid, string pwd, TransactionInformationType transactionInformation, int epayresponse) {
            this.gettransactionAsync(merchantnumber, transactionid, pwd, transactionInformation, epayresponse, null);
        }
        
        /// <remarks/>
        public void gettransactionAsync(int merchantnumber, long transactionid, string pwd, TransactionInformationType transactionInformation, int epayresponse, object userState) {
            if ((this.gettransactionOperationCompleted == null)) {
                this.gettransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngettransactionOperationCompleted);
            }
            this.InvokeAsync("gettransaction", new object[] {
                        merchantnumber,
                        transactionid,
                        pwd,
                        transactionInformation,
                        epayresponse}, this.gettransactionOperationCompleted, userState);
        }
        
        private void OngettransactionOperationCompleted(object arg) {
            if ((this.gettransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.gettransactionCompleted(this, new gettransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/payment/gettransactionlist", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool gettransactionlist(int merchantnumber, TransactionStatus status, System.DateTime searchdatestart, System.DateTime searchdateend, string searchorderid, string searchgroup, string pwd, ref TransactionInformationType[] transactionInformationAry, ref int epayresponse) {
            object[] results = this.Invoke("gettransactionlist", new object[] {
                        merchantnumber,
                        status,
                        searchdatestart,
                        searchdateend,
                        searchorderid,
                        searchgroup,
                        pwd,
                        transactionInformationAry,
                        epayresponse});
            transactionInformationAry = ((TransactionInformationType[])(results[1]));
            epayresponse = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void gettransactionlistAsync(int merchantnumber, TransactionStatus status, System.DateTime searchdatestart, System.DateTime searchdateend, string searchorderid, string searchgroup, string pwd, TransactionInformationType[] transactionInformationAry, int epayresponse) {
            this.gettransactionlistAsync(merchantnumber, status, searchdatestart, searchdateend, searchorderid, searchgroup, pwd, transactionInformationAry, epayresponse, null);
        }
        
        /// <remarks/>
        public void gettransactionlistAsync(int merchantnumber, TransactionStatus status, System.DateTime searchdatestart, System.DateTime searchdateend, string searchorderid, string searchgroup, string pwd, TransactionInformationType[] transactionInformationAry, int epayresponse, object userState) {
            if ((this.gettransactionlistOperationCompleted == null)) {
                this.gettransactionlistOperationCompleted = new System.Threading.SendOrPostCallback(this.OngettransactionlistOperationCompleted);
            }
            this.InvokeAsync("gettransactionlist", new object[] {
                        merchantnumber,
                        status,
                        searchdatestart,
                        searchdateend,
                        searchorderid,
                        searchgroup,
                        pwd,
                        transactionInformationAry,
                        epayresponse}, this.gettransactionlistOperationCompleted, userState);
        }
        
        private void OngettransactionlistOperationCompleted(object arg) {
            if ((this.gettransactionlistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.gettransactionlistCompleted(this, new gettransactionlistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/payment/getcardinfo", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getcardinfo(int merchantnumber, string cardno_prefix, int amount, int currency, ref int acquirer, ref int fee, ref CardType cardtype, ref string cardtypetext, ref int epayresponse) {
            object[] results = this.Invoke("getcardinfo", new object[] {
                        merchantnumber,
                        cardno_prefix,
                        amount,
                        currency,
                        acquirer,
                        fee,
                        cardtype,
                        cardtypetext,
                        epayresponse});
            acquirer = ((int)(results[1]));
            fee = ((int)(results[2]));
            cardtype = ((CardType)(results[3]));
            cardtypetext = ((string)(results[4]));
            epayresponse = ((int)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getcardinfoAsync(int merchantnumber, string cardno_prefix, int amount, int currency, int acquirer, int fee, CardType cardtype, string cardtypetext, int epayresponse) {
            this.getcardinfoAsync(merchantnumber, cardno_prefix, amount, currency, acquirer, fee, cardtype, cardtypetext, epayresponse, null);
        }
        
        /// <remarks/>
        public void getcardinfoAsync(int merchantnumber, string cardno_prefix, int amount, int currency, int acquirer, int fee, CardType cardtype, string cardtypetext, int epayresponse, object userState) {
            if ((this.getcardinfoOperationCompleted == null)) {
                this.getcardinfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetcardinfoOperationCompleted);
            }
            this.InvokeAsync("getcardinfo", new object[] {
                        merchantnumber,
                        cardno_prefix,
                        amount,
                        currency,
                        acquirer,
                        fee,
                        cardtype,
                        cardtypetext,
                        epayresponse}, this.getcardinfoOperationCompleted, userState);
        }
        
        private void OngetcardinfoOperationCompleted(object arg) {
            if ((this.getcardinfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getcardinfoCompleted(this, new getcardinfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/payment/renew", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool renew(int merchantnumber, long transactionid, string group, string pwd, ref int pbsResponse, ref int epayresponse) {
            object[] results = this.Invoke("renew", new object[] {
                        merchantnumber,
                        transactionid,
                        group,
                        pwd,
                        pbsResponse,
                        epayresponse});
            pbsResponse = ((int)(results[1]));
            epayresponse = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void renewAsync(int merchantnumber, long transactionid, string group, string pwd, int pbsResponse, int epayresponse) {
            this.renewAsync(merchantnumber, transactionid, group, pwd, pbsResponse, epayresponse, null);
        }
        
        /// <remarks/>
        public void renewAsync(int merchantnumber, long transactionid, string group, string pwd, int pbsResponse, int epayresponse, object userState) {
            if ((this.renewOperationCompleted == null)) {
                this.renewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrenewOperationCompleted);
            }
            this.InvokeAsync("renew", new object[] {
                        merchantnumber,
                        transactionid,
                        group,
                        pwd,
                        pbsResponse,
                        epayresponse}, this.renewOperationCompleted, userState);
        }
        
        private void OnrenewOperationCompleted(object arg) {
            if ((this.renewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.renewCompleted(this, new renewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment")]
    public partial class TransactionInformationType {
        
        private string groupField;
        
        private int authamountField;
        
        private int currencyField;
        
        private int cardtypeidField;
        
        private int capturedamountField;
        
        private int creditedamountField;
        
        private string orderidField;
        
        private string descriptionField;
        
        private System.DateTime authdateField;
        
        private System.DateTime captureddateField;
        
        private System.DateTime deleteddateField;
        
        private System.DateTime crediteddateField;
        
        private TransactionStatus statusField;
        
        private TransactionHistoryInfo[] historyField;
        
        private long transactionidField;
        
        private string cardholderField;
        
        private PayMode modeField;
        
        private bool mscField;
        
        private int fraudStatusField;
        
        private string fraudMessageField;
        
        private int feeField;
        
        private bool splitpaymentField;
        
        private AcquirerType acquirerField;
        
        /// <remarks/>
        public string group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
        /// <remarks/>
        public int authamount {
            get {
                return this.authamountField;
            }
            set {
                this.authamountField = value;
            }
        }
        
        /// <remarks/>
        public int currency {
            get {
                return this.currencyField;
            }
            set {
                this.currencyField = value;
            }
        }
        
        /// <remarks/>
        public int cardtypeid {
            get {
                return this.cardtypeidField;
            }
            set {
                this.cardtypeidField = value;
            }
        }
        
        /// <remarks/>
        public int capturedamount {
            get {
                return this.capturedamountField;
            }
            set {
                this.capturedamountField = value;
            }
        }
        
        /// <remarks/>
        public int creditedamount {
            get {
                return this.creditedamountField;
            }
            set {
                this.creditedamountField = value;
            }
        }
        
        /// <remarks/>
        public string orderid {
            get {
                return this.orderidField;
            }
            set {
                this.orderidField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime authdate {
            get {
                return this.authdateField;
            }
            set {
                this.authdateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime captureddate {
            get {
                return this.captureddateField;
            }
            set {
                this.captureddateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime deleteddate {
            get {
                return this.deleteddateField;
            }
            set {
                this.deleteddateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime crediteddate {
            get {
                return this.crediteddateField;
            }
            set {
                this.crediteddateField = value;
            }
        }
        
        /// <remarks/>
        public TransactionStatus status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public TransactionHistoryInfo[] history {
            get {
                return this.historyField;
            }
            set {
                this.historyField = value;
            }
        }
        
        /// <remarks/>
        public long transactionid {
            get {
                return this.transactionidField;
            }
            set {
                this.transactionidField = value;
            }
        }
        
        /// <remarks/>
        public string cardholder {
            get {
                return this.cardholderField;
            }
            set {
                this.cardholderField = value;
            }
        }
        
        /// <remarks/>
        public PayMode mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
        
        /// <remarks/>
        public bool msc {
            get {
                return this.mscField;
            }
            set {
                this.mscField = value;
            }
        }
        
        /// <remarks/>
        public int fraudStatus {
            get {
                return this.fraudStatusField;
            }
            set {
                this.fraudStatusField = value;
            }
        }
        
        /// <remarks/>
        public string FraudMessage {
            get {
                return this.fraudMessageField;
            }
            set {
                this.fraudMessageField = value;
            }
        }
        
        /// <remarks/>
        public int fee {
            get {
                return this.feeField;
            }
            set {
                this.feeField = value;
            }
        }
        
        /// <remarks/>
        public bool splitpayment {
            get {
                return this.splitpaymentField;
            }
            set {
                this.splitpaymentField = value;
            }
        }
        
        /// <remarks/>
        public AcquirerType acquirer {
            get {
                return this.acquirerField;
            }
            set {
                this.acquirerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment")]
    public enum TransactionStatus {
        
        /// <remarks/>
        PAYMENT_UNDEFINED,
        
        /// <remarks/>
        PAYMENT_NEW,
        
        /// <remarks/>
        PAYMENT_CAPTURED,
        
        /// <remarks/>
        PAYMENT_DELETED,
        
        /// <remarks/>
        PAYMENT_INSTANT_CAPTURE_FAILED,
        
        /// <remarks/>
        PAYMENT_SUBSCRIPTION_INI,
        
        /// <remarks/>
        PAYMENT_RENEW,
        
        /// <remarks/>
        PAYMENT_EUROLINE_WAIT_CAPTURE,
        
        /// <remarks/>
        PAYMENT_EUROLINE_WAIT_CREDIT,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment")]
    public partial class TransactionHistoryInfo {
        
        private long transactionHistoryIDField;
        
        private int logonIDField;
        
        private string usernameField;
        
        private string eventMsgField;
        
        private System.DateTime createdField;
        
        /// <remarks/>
        public long transactionHistoryID {
            get {
                return this.transactionHistoryIDField;
            }
            set {
                this.transactionHistoryIDField = value;
            }
        }
        
        /// <remarks/>
        public int logonID {
            get {
                return this.logonIDField;
            }
            set {
                this.logonIDField = value;
            }
        }
        
        /// <remarks/>
        public string username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string eventMsg {
            get {
                return this.eventMsgField;
            }
            set {
                this.eventMsgField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment")]
    public enum PayMode {
        
        /// <remarks/>
        MODE_PRODUCTION,
        
        /// <remarks/>
        MODE_TEST,
        
        /// <remarks/>
        MODE_EPAY,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment")]
    public enum AcquirerType {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        PBS,
        
        /// <remarks/>
        EUROLINE,
        
        /// <remarks/>
        DANSKE_BANK,
        
        /// <remarks/>
        NORDEA,
        
        /// <remarks/>
        EWIRE,
        
        /// <remarks/>
        SWEDBANK,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/payment")]
    public enum CardType {
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        DANKORT,
        
        /// <remarks/>
        VISA_DANKORT,
        
        /// <remarks/>
        VISA_ELECTRON_FOREIGN,
        
        /// <remarks/>
        MASTERCARD,
        
        /// <remarks/>
        MASTERCARD_FOREIGN,
        
        /// <remarks/>
        VISA_ELECTRON,
        
        /// <remarks/>
        JCB,
        
        /// <remarks/>
        DINERS,
        
        /// <remarks/>
        MAESTRO,
        
        /// <remarks/>
        AMERICAN_EXPRESS,
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        EDK,
        
        /// <remarks/>
        DINERS_FOREIGN,
        
        /// <remarks/>
        AMERICAN_EXPRESS_FOREIGN,
        
        /// <remarks/>
        MAESTRO_FOREIGN,
        
        /// <remarks/>
        FORBRUGSFORENINGEN,
        
        /// <remarks/>
        EWIRE,
        
        /// <remarks/>
        VISA,
        
        /// <remarks/>
        IKANO,
        
        /// <remarks/>
        OTHERS,
        
        /// <remarks/>
        NORDEA_SOLO,
        
        /// <remarks/>
        DANSKE_BANK,
        
        /// <remarks/>
        BG_BANK,
        
        /// <remarks/>
        LIC_MASTERCARD,
        
        /// <remarks/>
        LIC_MASTERCARD_FOREIGN,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getPbsErrorCompletedEventHandler(object sender, getPbsErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPbsErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPbsErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbsresponsestring {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getEpayErrorCompletedEventHandler(object sender, getEpayErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEpayErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEpayErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string epayresponsestring {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void captureCompletedEventHandler(object sender, captureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class captureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal captureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pbsResponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void move_as_capturedCompletedEventHandler(object sender, move_as_capturedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class move_as_capturedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal move_as_capturedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteCompletedEventHandler(object sender, deleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void creditCompletedEventHandler(object sender, creditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class creditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal creditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pbsresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getcardtypeCompletedEventHandler(object sender, getcardtypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getcardtypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getcardtypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int cardtypeid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string cardname {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void gettransactionCompletedEventHandler(object sender, gettransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class gettransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal gettransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public TransactionInformationType transactionInformation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransactionInformationType)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void gettransactionlistCompletedEventHandler(object sender, gettransactionlistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class gettransactionlistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal gettransactionlistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public TransactionInformationType[] transactionInformationAry {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransactionInformationType[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getcardinfoCompletedEventHandler(object sender, getcardinfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getcardinfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getcardinfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int acquirer {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int fee {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public CardType cardtype {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CardType)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string cardtypetext {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void renewCompletedEventHandler(object sender, renewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class renewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal renewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pbsResponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591